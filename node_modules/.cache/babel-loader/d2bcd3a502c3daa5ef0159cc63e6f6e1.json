{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\n * Generic registry for storing and retrieving items\n * @class @abstract\n */\n\n\nvar Registry =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Create a new Registry instance\n   * @returns {Registry}\n   */\n  function Registry() {\n    _classCallCheck(this, Registry);\n\n    this._registry = {};\n  }\n  /**\n   * Returns the registry item stored with against an id\n   * @param {*} id The key item was registered with\n   * @returns {*} Item stored in registry\n   */\n\n\n  _createClass(Registry, [{\n    key: \"get\",\n    value: function get(id) {\n      return this._registry[id];\n    }\n    /**\n     * Add an item to the registry\n     * @param {*} id Key to store the item against\n     * @param {*} item Item to store in the registry\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(id, item) {\n      this._registry[id] = item;\n    }\n    /**\n     * Remove an item from the registry\n     * @param {*} id Key of the item to remove from the registry\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(id) {\n      delete this._registry[id];\n    }\n    /**\n     * A plain JavaScript representation of the registry, useful for serialization or\n     * debugging\n     * @returns {Object.<*,*>} Serialized representation of the registry\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this._registry;\n    }\n  }]);\n\n  return Registry;\n}();\n\nexport default Registry;","map":null,"metadata":{},"sourceType":"module"}