{"ast":null,"code":"import * as actions from 'store/dataSet/dataSetActions';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { initialState } from 'store/initialState';\nexport const dataSet = (state = initialState.dataSet, action) => {\n  switch (action.type) {\n    case actions.SET_DISPLAY_DATA:\n      {\n        const cloneState = cloneDeep(state);\n        cloneState[displayedData] = payload;\n        return Array.isArray(action.payload) ? updateState(state, 'displayedData', action.payload) : state;\n      }\n\n    case actions.REMOVE_SYMBOL:\n      {\n        const cloneState = cloneDeep(state);\n        return cloneState.filter(function (element) {\n          return element['symbol'] !== action.payload;\n        });\n      }\n\n    case actions.ADD_SYMBOL:\n      {\n        const cloneState = cloneDeep(state);\n        cloneState.push(action.payload);\n        return cloneState;\n      }\n\n    case actions.SET_QUOTE_DETAILS_DATA:\n      {\n        const cloneState = cloneDeep(state);\n        console.log(cloneState);\n        cloneState.quoteDetail = action.payload;\n        console.log(cloneState);\n        return cloneState;\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst updateState = (state, attribute, payload) => {\n  const cloneState = cloneDeep(state);\n  cloneState[attribute] = payload;\n  return cloneState;\n};","map":{"version":3,"sources":["/Users/kylecardiel/Documents/Development/Frontend/watchlistdashboard/src/store/dataSet/dataSetReducer.js"],"names":["actions","cloneDeep","initialState","dataSet","state","action","type","SET_DISPLAY_DATA","cloneState","displayedData","payload","Array","isArray","updateState","REMOVE_SYMBOL","filter","element","ADD_SYMBOL","push","SET_QUOTE_DETAILS_DATA","console","log","quoteDetail","attribute"],"mappings":"AAAA,OAAO,KAAKA,OAAZ,MAAyB,8BAAzB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,SAASC,YAAT,QAA6B,oBAA7B;AAEA,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGF,YAAY,CAACC,OAAtB,EAA+BE,MAA/B,KAA0C;AAC7D,UAAQA,MAAM,CAACC,IAAf;AACA,SAAKN,OAAO,CAACO,gBAAb;AAA+B;AAC3B,cAAMC,UAAU,GAAGP,SAAS,CAACG,KAAD,CAA5B;AACAI,QAAAA,UAAU,CAACC,aAAD,CAAV,GAA4BC,OAA5B;AACA,eAAOC,KAAK,CAACC,OAAN,CAAcP,MAAM,CAACK,OAArB,IACDG,WAAW,CAACT,KAAD,EAAQ,eAAR,EAAyBC,MAAM,CAACK,OAAhC,CADV,GAEDN,KAFN;AAGH;;AACD,SAAKJ,OAAO,CAACc,aAAb;AAA4B;AACxB,cAAMN,UAAU,GAAGP,SAAS,CAACG,KAAD,CAA5B;AACA,eAAOI,UAAU,CAACO,MAAX,CAAkB,UAAUC,OAAV,EAAmB;AACxC,iBAAOA,OAAO,CAAC,QAAD,CAAP,KAAsBX,MAAM,CAACK,OAApC;AACH,SAFM,CAAP;AAGH;;AACD,SAAKV,OAAO,CAACiB,UAAb;AAAyB;AACrB,cAAMT,UAAU,GAAGP,SAAS,CAACG,KAAD,CAA5B;AACAI,QAAAA,UAAU,CAACU,IAAX,CAAgBb,MAAM,CAACK,OAAvB;AACA,eAAOF,UAAP;AACH;;AACD,SAAKR,OAAO,CAACmB,sBAAb;AAAqC;AACjC,cAAMX,UAAU,GAAGP,SAAS,CAACG,KAAD,CAA5B;AACAgB,QAAAA,OAAO,CAACC,GAAR,CAAYb,UAAZ;AACAA,QAAAA,UAAU,CAACc,WAAX,GAAyBjB,MAAM,CAACK,OAAhC;AACAU,QAAAA,OAAO,CAACC,GAAR,CAAYb,UAAZ;AACA,eAAOA,UAAP;AACH;;AACD;AACI,aAAOJ,KAAP;AA3BJ;AA6BH,CA9BM;;AAgCP,MAAMS,WAAW,GAAG,CAACT,KAAD,EAAQmB,SAAR,EAAmBb,OAAnB,KAA+B;AAC/C,QAAMF,UAAU,GAAGP,SAAS,CAACG,KAAD,CAA5B;AACAI,EAAAA,UAAU,CAACe,SAAD,CAAV,GAAwBb,OAAxB;AACA,SAAOF,UAAP;AACH,CAJD","sourcesContent":["import * as actions from 'store/dataSet/dataSetActions';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { initialState } from 'store/initialState';\n\nexport const dataSet = (state = initialState.dataSet, action) => {\n    switch (action.type) {\n    case actions.SET_DISPLAY_DATA: {\n        const cloneState = cloneDeep(state);\n        cloneState[displayedData] = payload;\n        return Array.isArray(action.payload)\n            ? updateState(state, 'displayedData', action.payload)\n            : state;\n    }\n    case actions.REMOVE_SYMBOL: {\n        const cloneState = cloneDeep(state);\n        return cloneState.filter(function (element) {\n            return element['symbol'] !== action.payload;\n        });\n    }\n    case actions.ADD_SYMBOL: {\n        const cloneState = cloneDeep(state);\n        cloneState.push(action.payload)\n        return cloneState;\n    }\n    case actions.SET_QUOTE_DETAILS_DATA: {\n        const cloneState = cloneDeep(state);\n        console.log(cloneState)\n        cloneState.quoteDetail = action.payload;\n        console.log(cloneState)\n        return cloneState;\n    }\n    default:\n        return state;\n    }\n};\n\nconst updateState = (state, attribute, payload) => {\n    const cloneState = cloneDeep(state);\n    cloneState[attribute] = payload;\n    return cloneState;\n};"]},"metadata":{},"sourceType":"module"}