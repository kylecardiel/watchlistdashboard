{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport Logger from './logging/Logger';\nimport FocusOnlyKeyEventStrategy from './strategies/FocusOnlyKeyEventStrategy';\nimport GlobalKeyEventStrategy from './strategies/GlobalKeyEventStrategy';\nimport isFromFocusOnlyComponent from '../helpers/resolving-handlers/isFromFocusOnlyComponent';\nimport Configuration from './config/Configuration';\nimport EventResponse from '../const/EventResponse';\n/**\n * Provides a registry for keyboard sequences and events, and the handlers that should\n * be called when they are detected. Also contains the interface for processing and\n * matching keyboard events against its list of registered actions and handlers.\n * @class\n */\n\nvar KeyEventManager =\n/*#__PURE__*/\nfunction () {\n  _createClass(KeyEventManager, null, [{\n    key: \"getInstance\",\n\n    /**\n     * Creates a new KeyEventManager instance if one does not already exist or returns the\n     * instance that already exists.\n     * @param {Object} configuration Configuration object\n     * @param {Logger} configuration.logger Logger instance\n     * @returns {KeyEventManager} The key event manager instance\n     */\n    value: function getInstance() {\n      var configuration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (!this.instance) {\n        this.instance = new KeyEventManager(configuration);\n      }\n\n      return this.instance;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      delete this.instance;\n    }\n    /**\n     * Creates a new KeyEventManager instance. It is expected that only a single instance\n     * will be used with a render tree.\n     */\n\n  }]);\n\n  function KeyEventManager() {\n    var configuration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, KeyEventManager);\n\n    this.logger = configuration.logger || new Logger(Configuration.option('logLevel'));\n    this._focusOnlyEventStrategy = new FocusOnlyKeyEventStrategy({\n      configuration: configuration,\n      logger: this.logger\n    }, this);\n    this._globalEventStrategy = new GlobalKeyEventStrategy({\n      configuration: configuration,\n      logger: this.logger\n    }, this);\n    this.mountedComponentsCount = 0;\n  }\n  /********************************************************************************\n   * Generating key maps\n   ********************************************************************************/\n\n\n  _createClass(KeyEventManager, [{\n    key: \"getApplicationKeyMap\",\n    value: function getApplicationKeyMap() {\n      return Object.assign(this._globalEventStrategy.getApplicationKeyMap(), this._focusOnlyEventStrategy.getApplicationKeyMap());\n    }\n    /********************************************************************************\n     * Registering key maps\n     ********************************************************************************/\n\n    /**\n     * Registers a new mounted component's key map so that it can be included in the\n     * application's key map\n     * @param {KeyMap} keyMap - Map of actions to key expressions\n     * @returns {ComponentId} Unique component ID to assign to the focused HotKeys\n     *          component and passed back when handling a key event\n     */\n\n  }, {\n    key: \"registerKeyMap\",\n    value: function registerKeyMap() {\n      var keyMap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this._focusOnlyEventStrategy.registerKeyMap(keyMap);\n    }\n    /**\n     * Re-registers (updates) a mounted component's key map\n     * @param {ComponentId} componentId - Id of the component that the keyMap belongs to\n     * @param {KeyMap} keyMap - Map of actions to key expressions\n     */\n\n  }, {\n    key: \"reregisterKeyMap\",\n    value: function reregisterKeyMap(componentId) {\n      var keyMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      this._focusOnlyEventStrategy.reregisterKeyMap(componentId, keyMap);\n    }\n    /**\n     * De-registers (removes) a mounted component's key map from the registry\n     * @param {ComponentId} componentId - Id of the component that the keyMap belongs to\n     */\n\n  }, {\n    key: \"deregisterKeyMap\",\n    value: function deregisterKeyMap(componentId) {\n      this._focusOnlyEventStrategy.deregisterKeyMap(componentId);\n    }\n    /**\n     * Registers that a component has now mounted, and declares its parent HotKeys\n     * component id so that actions may be properly resolved\n     * @param {ComponentId} componentId - Id of the component that has mounted\n     * @param {ComponentId} parentId - Id of the parent HotKeys component\n     */\n\n  }, {\n    key: \"registerComponentMount\",\n    value: function registerComponentMount(componentId, parentId) {\n      this._incrementComponentCount();\n\n      return this._focusOnlyEventStrategy.registerComponentMount(componentId, parentId);\n    }\n  }, {\n    key: \"registerComponentUnmount\",\n    value: function registerComponentUnmount() {\n      this._decrementComponentCount();\n    }\n  }, {\n    key: \"_incrementComponentCount\",\n    value: function _incrementComponentCount() {\n      var _this = this;\n\n      var preMountedComponentCount = this.mountedComponentsCount;\n      this.mountedComponentsCount += 1;\n\n      if (preMountedComponentCount === 0 && this.mountedComponentsCount === 1) {\n        window.onblur = function () {\n          return _this._clearKeyHistory();\n        };\n      }\n    }\n  }, {\n    key: \"_decrementComponentCount\",\n    value: function _decrementComponentCount() {\n      var preMountedComponentCount = this.mountedComponentsCount;\n      this.mountedComponentsCount -= 1;\n\n      if (preMountedComponentCount === 1 && this.mountedComponentsCount === 0) {\n        delete window.onblur;\n      }\n    }\n  }, {\n    key: \"_clearKeyHistory\",\n    value: function _clearKeyHistory() {\n      this.logger.info('HotKeys: Window focused - clearing key history');\n\n      this._focusOnlyEventStrategy.resetKeyHistory({\n        force: true\n      });\n\n      this._globalEventStrategy.resetKeyHistory({\n        force: true\n      });\n    }\n    /**\n     * Registers a new mounted component's global key map so that it can be included in the\n     * application's key map\n     * @param {KeyMap} keyMap - Map of actions to key expressions\n     * @returns {ComponentId} Unique component ID to assign to the focused HotKeys\n     *          component and passed back when handling a key event\n     */\n\n  }, {\n    key: \"registerGlobalKeyMap\",\n    value: function registerGlobalKeyMap() {\n      var keyMap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this._globalEventStrategy.registerKeyMap(keyMap);\n    }\n  }, {\n    key: \"registerGlobalComponentUnmount\",\n    value: function registerGlobalComponentUnmount() {\n      this._decrementComponentCount();\n    }\n    /**\n     * Registers that a component has now mounted, and declares its parent GlobalHotKeys\n     * component id so that actions may be properly resolved\n     * @param {ComponentId} componentId - Id of the component that has mounted\n     * @param {ComponentId} parentId - Id of the parent GlobalHotKeys component\n     */\n\n  }, {\n    key: \"registerGlobalComponentMount\",\n    value: function registerGlobalComponentMount(componentId, parentId) {\n      this._incrementComponentCount();\n\n      return this._globalEventStrategy.registerComponentMount(componentId, parentId);\n    }\n    /**\n     * Re-registers (updates) a mounted component's global key map\n     * @param {ComponentId} componentId - Id of the component that the keyMap belongs to\n     * @param {KeyMap} keyMap - Map of actions to key expressions\n     */\n\n  }, {\n    key: \"reregisterGlobalKeyMap\",\n    value: function reregisterGlobalKeyMap(componentId, keyMap) {\n      this._globalEventStrategy.reregisterKeyMap(componentId, keyMap);\n    }\n    /**\n     * De-registers (removes) a mounted component's global key map from the registry\n     * @param {ComponentId} componentId - Id of the component that the keyMap belongs to\n     */\n\n  }, {\n    key: \"deregisterGlobalKeyMap\",\n    value: function deregisterGlobalKeyMap(componentId) {\n      this._globalEventStrategy.deregisterKeyMap(componentId);\n    }\n    /********************************************************************************\n     * Recording key combination\n     ********************************************************************************/\n\n    /**\n     * Adds a listener function that will be called the next time a key combination completes\n     * @param {keyCombinationListener} callbackFunction Listener function to be called\n     * @returns {function} Function to call to cancel listening to the next key combination\n     */\n\n  }, {\n    key: \"addKeyCombinationListener\",\n    value: function addKeyCombinationListener(callbackFunction) {\n      return this._globalEventStrategy.addKeyCombinationListener(callbackFunction);\n    }\n    /********************************************************************************\n     * Focus key events\n     ********************************************************************************/\n\n    /**\n     * Registers the actions and handlers of a HotKeys component that has gained focus\n     * @param {ComponentId} componentId - Id of the component that the keyMap belongs to\n     * @param {KeyMap} actionNameToKeyMap - Map of actions to key expressions\n     * @param {HandlersMap} actionNameToHandlersMap - Map of actions to handler functions\n     * @param {Object} options Hash of options that configure how the actions\n     *        and handlers are associated and called.\n     * @returns {FocusTreeId} The current focus tree's ID\n     */\n\n  }, {\n    key: \"enableHotKeys\",\n    value: function enableHotKeys(componentId) {\n      var actionNameToKeyMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var actionNameToHandlersMap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var options = arguments.length > 3 ? arguments[3] : undefined;\n      return this._focusOnlyEventStrategy.enableHotKeys(componentId, actionNameToKeyMap, actionNameToHandlersMap, options);\n    }\n    /**\n     * Handles when a HotKeys component that is in focus updates its props and changes\n     * either the keyMap or handlers prop value\n     * @param {FocusTreeId} focusTreeId - The ID of the focus tree the component is part of.\n     *        Used to identify (and ignore) stale updates.\n     * @param {ComponentId} componentId - The component index of the component to\n     *        update\n     * @param {KeyMap} actionNameToKeyMap - Map of key sequences to action names\n     * @param {HandlersMap} actionNameToHandlersMap - Map of action names to handler\n     *        functions\n     * @param {Object} options Hash of options that configure how the actions\n     *        and handlers are associated and called.\n     */\n\n  }, {\n    key: \"updateEnabledHotKeys\",\n    value: function updateEnabledHotKeys(focusTreeId, componentId) {\n      var actionNameToKeyMap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var actionNameToHandlersMap = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      var options = arguments.length > 4 ? arguments[4] : undefined;\n      return this._focusOnlyEventStrategy.updateEnabledHotKeys(focusTreeId, componentId, actionNameToKeyMap, actionNameToHandlersMap, options);\n    }\n    /**\n     * Handles when a component loses focus by resetting the internal state, ready to\n     * receive the next tree of focused HotKeys components\n     * @param {FocusTreeId} focusTreeId - Id of focus tree component thinks it's\n     *        apart of\n     * @param {ComponentId} componentId - Index of component that is blurring\n     * @returns {boolean} Whether the component still has event propagation yet to handle\n     */\n\n  }, {\n    key: \"disableHotKeys\",\n    value: function disableHotKeys(focusTreeId, componentId) {\n      return this._focusOnlyEventStrategy.disableHotKeys(focusTreeId, componentId);\n    }\n    /**\n     * Records a keydown keyboard event and matches it against the list of pre-registered\n     * event handlers, calling the first matching handler with the highest priority if\n     * one exists.\n     *\n     * This method is called many times as a keyboard event bubbles up through the React\n     * render tree. The event is only registered the first time it is seen and results\n     * of some calculations are cached. The event is matched against the handlers registered\n     * at each component level, to ensure the proper handler declaration scoping.\n     * @param {KeyboardEvent} event - Event containing the key name and state\n     * @param {FocusTreeId} focusTreeId - Id of focus tree component thinks it's apart of\n     * @param {ComponentId} componentId - The id of the component that is currently handling\n     *        the keyboard event as it bubbles towards the document root.\n     * @param {Object} options - Hash of options that configure how the event is handled.\n     * @returns Whether the event was discarded because it was part of an old focus tree\n     */\n\n  }, {\n    key: \"handleKeydown\",\n    value: function handleKeydown(event, focusTreeId, componentId, options) {\n      if (isFromFocusOnlyComponent(focusTreeId)) {\n        return this._focusOnlyEventStrategy.handleKeydown(event, focusTreeId, componentId, options);\n      }\n    }\n    /**\n     * Records a keypress keyboard event and matches it against the list of pre-registered\n     * event handlers, calling the first matching handler with the highest priority if\n     * one exists.\n     *\n     * This method is called many times as a keyboard event bubbles up through the React\n     * render tree. The event is only registered the first time it is seen and results\n     * of some calculations are cached. The event is matched against the handlers registered\n     * at each component level, to ensure the proper handler declaration scoping.\n     * @param {KeyboardEvent} event - Event containing the key name and state\n     * @param {FocusTreeId} focusTreeId Id - of focus tree component thinks it's apart of\n     * @param {ComponentId} componentId - The index of the component that is currently handling\n     *        the keyboard event as it bubbles towards the document root.\n     * @param {Object} options - Hash of options that configure how the event\n     *        is handled.\n     */\n\n  }, {\n    key: \"handleKeyPress\",\n    value: function handleKeyPress(event, focusTreeId, componentId, options) {\n      if (isFromFocusOnlyComponent(focusTreeId)) {\n        return this._focusOnlyEventStrategy.handleKeyPress(event, focusTreeId, componentId, options);\n      }\n    }\n    /**\n     * Records a keyup keyboard event and matches it against the list of pre-registered\n     * event handlers, calling the first matching handler with the highest priority if\n     * one exists.\n     *\n     * This method is called many times as a keyboard event bubbles up through the React\n     * render tree. The event is only registered the first time it is seen and results\n     * of some calculations are cached. The event is matched against the handlers registered\n     * at each component level, to ensure the proper handler declaration scoping.\n     * @param {KeyboardEvent} event Event containing the key name and state\n     * @param {FocusTreeId} focusTreeId Id of focus tree component thinks it's apart of\n     * @param {ComponentId} componentId The index of the component that is currently handling\n     *        the keyboard event as it bubbles towards the document root.\n     * @param {Object} options Hash of options that configure how the event\n     *        is handled.\n     */\n\n  }, {\n    key: \"handleKeyUp\",\n    value: function handleKeyUp(event, focusTreeId, componentId, options) {\n      if (isFromFocusOnlyComponent(focusTreeId)) {\n        return this._focusOnlyEventStrategy.handleKeyUp(event, focusTreeId, componentId, options);\n      }\n    }\n    /********************************************************************************\n     * Global key events\n     ********************************************************************************/\n\n    /**\n     * Registers the actions and handlers of a HotKeys component that has mounted\n     * @param {ComponentId} componentId - Id of the component that the keyMap belongs to\n     * @param {KeyMap} actionNameToKeyMap - Map of actions to key expressions\n     * @param {HandlersMap} actionNameToHandlersMap - Map of actions to handler functions\n     * @param {Object} options Hash of options that configure how the actions\n     *        and handlers are associated and called.\n     * @param {Object} eventOptions - Options for how the event should be handled\n     * @returns {ComponentId} A unique component ID to assign to the focused HotKeys\n     *        component and passed back when handling a key event\n     */\n\n  }, {\n    key: \"enableGlobalHotKeys\",\n    value: function enableGlobalHotKeys(componentId) {\n      var actionNameToKeyMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var actionNameToHandlersMap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var options = arguments.length > 3 ? arguments[3] : undefined;\n      var eventOptions = arguments.length > 4 ? arguments[4] : undefined;\n      return this._globalEventStrategy.enableHotKeys(componentId, actionNameToKeyMap, actionNameToHandlersMap, options, eventOptions);\n    }\n    /**\n     * Handles when a mounted global HotKeys component updates its props and changes\n     * either the keyMap or handlers prop value\n     * @param {ComponentId} componentId - The component index of the component to\n     *        update\n     * @param {KeyMap} actionNameToKeyMap - Map of actions to key expressions\n     * @param {HandlersMap} actionNameToHandlersMap - Map of actions to handler functions\n     * @param {Object} options Hash of options that configure how the actions\n     *        and handlers are associated and called.\n     * @param {Object} eventOptions - Options for how the event should be handled\n     */\n\n  }, {\n    key: \"updateEnabledGlobalHotKeys\",\n    value: function updateEnabledGlobalHotKeys(componentId) {\n      var actionNameToKeyMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var actionNameToHandlersMap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var options = arguments.length > 3 ? arguments[3] : undefined;\n      var eventOptions = arguments.length > 4 ? arguments[4] : undefined;\n      return this._globalEventStrategy.updateEnabledHotKeys(componentId, actionNameToKeyMap, actionNameToHandlersMap, options, eventOptions);\n    }\n    /**\n     * Handles when a component is unmounted\n     * @param {ComponentId} componentId - Index of component that is being unmounted\n     */\n\n  }, {\n    key: \"disableGlobalHotKeys\",\n    value: function disableGlobalHotKeys(componentId) {\n      return this._globalEventStrategy.disableHotKeys(componentId);\n    }\n    /**\n     * Records a keydown keyboard event and matches it against the list of pre-registered\n     * event handlers, calling the first matching handler with the highest priority if\n     * one exists.\n     *\n     * This method is called once when a keyboard event bubbles up to document, and checks\n     * the keymaps for all of the mounted global HotKey components.\n     * @param {KeyboardEvent} event - Event containing the key name and state\n     */\n\n  }, {\n    key: \"handleGlobalKeyDown\",\n    value: function handleGlobalKeyDown(event) {\n      return this._globalEventStrategy.handleKeydown(event);\n    }\n    /**\n     * Records a keypress keyboard event and matches it against the list of pre-registered\n     * event handlers, calling the first matching handler with the highest priority if\n     * one exists.\n     *\n     * This method is called once when a keyboard event bubbles up to document, and checks\n     * the keymaps for all of the mounted global HotKey components.\n     * @param {KeyboardEvent} event - Event containing the key name and state\n     */\n\n  }, {\n    key: \"handleGlobalKeyPress\",\n    value: function handleGlobalKeyPress(event) {\n      return this._globalEventStrategy.handleKeyPress(event);\n    }\n    /**\n     * Records a keyup keyboard event and matches it against the list of pre-registered\n     * event handlers, calling the first matching handler with the highest priority if\n     * one exists.\n     *\n     * This method is called once when a keyboard event bubbles up to document, and checks\n     * the keymaps for all of the mounted global HotKey components.\n     * @param {KeyboardEvent} event - Event containing the key name and state\n     */\n\n  }, {\n    key: \"handleGlobalKeyUp\",\n    value: function handleGlobalKeyUp(event) {\n      return this._globalEventStrategy.handleKeyUp(event);\n    }\n    /**\n     * Ignores the next keyboard event immediately, rather than waiting for it to\n     * match the ignoreEventsCondition\n     * @param {KeyboardEvent} event keyboard event to ignore\n     * @see Configuration.ignoreEventsCondition\n     */\n\n  }, {\n    key: \"ignoreEvent\",\n    value: function ignoreEvent(event) {\n      this._focusOnlyEventStrategy.getEventPropagator().ignoreEvent(event);\n    }\n    /**\n     * Forces the observation of the next keyboard event immediately, disregarding whether\n     * the event matches the ignoreKeyEventsCondition\n     * @param {KeyboardEvent} event keyboard event to force the observation of\n     * @see Configuration.ignoreEventsCondition\n     */\n\n  }, {\n    key: \"observeIgnoredEvents\",\n    value: function observeIgnoredEvents(event) {\n      this._focusOnlyEventStrategy.getEventPropagator().observeIgnoredEvents(event);\n    }\n    /**\n     * Closes any hanging key combinations that have not received the key event indicated\n     * by recordIndex.\n     * @param {KeyName} keyName The name of the key whose state should be updated if it\n     *        is currently set to keydown or keypress.\n     * @param {KeyEventType} recordIndex Index of key event to move the key state\n     *        up to.\n     */\n\n  }, {\n    key: \"closeHangingKeyCombination\",\n    value: function closeHangingKeyCombination(keyName, recordIndex) {\n      this._focusOnlyEventStrategy.closeHangingKeyCombination(keyName, recordIndex);\n    }\n  }, {\n    key: \"reactAppHistoryWithEvent\",\n    value: function reactAppHistoryWithEvent(key, type) {\n      var previousPropagation = this._focusOnlyEventStrategy.eventPropagator.getPreviousPropagation();\n\n      if (previousPropagation.isForKey(key) && previousPropagation.isForEventType(type)) {\n        if (previousPropagation.isHandled()) {\n          return EventResponse.handled;\n        } else if (previousPropagation.isIgnoringEvent()) {\n          return EventResponse.ignored;\n        } else {\n          return EventResponse.seen;\n        }\n      } else {\n        return EventResponse.unseen;\n      }\n    }\n  }, {\n    key: \"simulatePendingKeyPressEvents\",\n    value: function simulatePendingKeyPressEvents() {\n      this._focusOnlyEventStrategy.simulatePendingKeyPressEvents();\n    }\n  }, {\n    key: \"simulatePendingKeyUpEvents\",\n    value: function simulatePendingKeyUpEvents() {\n      this._focusOnlyEventStrategy.simulatePendingKeyUpEvents();\n    }\n  }, {\n    key: \"isGlobalListenersBound\",\n    value: function isGlobalListenersBound() {\n      return this._globalEventStrategy.listenersBound;\n    }\n  }]);\n\n  return KeyEventManager;\n}();\n\nexport default KeyEventManager;","map":null,"metadata":{},"sourceType":"module"}