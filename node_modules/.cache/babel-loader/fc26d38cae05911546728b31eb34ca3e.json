{"ast":null,"code":"import _defineProperty from \"/Users/kylecardiel/Documents/Development/Frontend/starwarscollection/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { DOMAIN_CONSTANTS } from 'shared/constants/domainConstants';\nexport const MOVIE_NAMES = Object.keys(DOMAIN_CONSTANTS.SOURCE.MOVIES).map(function (key) {\n  return DOMAIN_CONSTANTS.SOURCE.MOVIES[key].NAME;\n});\n\nconst getAllKeysInArrayFormat = obj => Object.keys(obj).map(function (key) {\n  return obj[key];\n});\n\nexport const GROUP_NAMES = getAllKeysInArrayFormat(DOMAIN_CONSTANTS.GROUPS);\nexport const VERSIONS = getAllKeysInArrayFormat(DOMAIN_CONSTANTS.VERSIONS);\nexport const TV_SHOWS = getAllKeysInArrayFormat(DOMAIN_CONSTANTS.SOURCE.TV_SHOWS);\nexport const VIDEO_GAME = getAllKeysInArrayFormat(DOMAIN_CONSTANTS.SOURCE.VIDEO_GAME);\nexport const ALL_SOURCE_NAMES = MOVIE_NAMES.concat(TV_SHOWS).concat(VIDEO_GAME);\nexport const MOVIE_FORMATS = getAllKeysInArrayFormat(DOMAIN_CONSTANTS.SOURCE.MOVIE_MEDIA_FORMATS);\nexport const CHARACTER_NAMES = getAllKeysInArrayFormat(DOMAIN_CONSTANTS.CHARATERS);\nexport const PRODUCT_TYPE = getAllKeysInArrayFormat(DOMAIN_CONSTANTS.PRODUCT.TYPE);\nexport const GET_PRODUCT_TYPE = demoMode => {\n  return demoMode ? ['Action Figures', 'Movies', 'Video Games'] : PRODUCT_TYPE;\n};\nexport const PRODUCT_TYPE_DETAILS = DOMAIN_CONSTANTS.PRODUCT.TYPE;\nexport const VIDEO_GAME_SYSTEMS = getAllKeysInArrayFormat(DOMAIN_CONSTANTS.PRODUCT.VIDEO_GAMES.SYSTEMS);\nexport const MOVIE_SETS = DOMAIN_CONSTANTS.SOURCE.MOVIE_SETS;\n\nconst PRODUCT_INFO = FilterCriteria => {\n  return Object.keys(DOMAIN_CONSTANTS.PRODUCT.LINES.ACTION_FIGURES).map(function (key) {\n    return DOMAIN_CONSTANTS.PRODUCT.LINES.ACTION_FIGURES[key][FilterCriteria];\n  });\n};\n\nexport const PRODUCT_LINES = PRODUCT_INFO('NAME');\n\nconst convertArrayToObject = array => {\n  const initialValue = {};\n  return array.reduce((obj, item) => {\n    const newKey = item.replace(/\\s/g, '_').replace(/[^a-zA-Z ]/g, '').toUpperCase();\n    return _objectSpread({}, obj, {\n      [newKey]: item\n    });\n  }, initialValue);\n};\n\nexport const PRODUCT_LINES_OBJ = convertArrayToObject(PRODUCT_LINES);\nexport const ASSORTMENT = DOMAIN_CONSTANTS.PRODUCT.LINES.ACTION_FIGURES.BLACK_SERIES_6.ASSORMENTS;\nexport const ACTION_FIGURE_PRODUCT_LINE = DOMAIN_CONSTANTS.PRODUCT.LINES.ACTION_FIGURES;\nexport const GET_SPECIFIC_ASSORTMENT = productLine => {\n  let specificAssortment;\n\n  if (productLine) {\n    Object.keys(ACTION_FIGURE_PRODUCT_LINE).forEach(assortment => {\n      if (ACTION_FIGURE_PRODUCT_LINE[assortment].NAME === productLine) {\n        specificAssortment = ACTION_FIGURE_PRODUCT_LINE[assortment].ASSORMENTS;\n      }\n    });\n  }\n\n  return specificAssortment;\n};\n\nconst GET_ASSORTMENT = () => {\n  let allAssort = Object.keys(ACTION_FIGURE_PRODUCT_LINE).map(function (key) {\n    return Object.values(ACTION_FIGURE_PRODUCT_LINE[key].ASSORMENTS);\n  });\n  return allAssort.flat();\n};\n\nexport const ALL_ASSORTMENT = GET_ASSORTMENT();","map":{"version":3,"sources":["/Users/kylecardiel/Documents/Development/Frontend/starwarscollection/src/shared/constants/domainConstantSelectors.js"],"names":["DOMAIN_CONSTANTS","MOVIE_NAMES","Object","keys","SOURCE","MOVIES","map","key","NAME","getAllKeysInArrayFormat","obj","GROUP_NAMES","GROUPS","VERSIONS","TV_SHOWS","VIDEO_GAME","ALL_SOURCE_NAMES","concat","MOVIE_FORMATS","MOVIE_MEDIA_FORMATS","CHARACTER_NAMES","CHARATERS","PRODUCT_TYPE","PRODUCT","TYPE","GET_PRODUCT_TYPE","demoMode","PRODUCT_TYPE_DETAILS","VIDEO_GAME_SYSTEMS","VIDEO_GAMES","SYSTEMS","MOVIE_SETS","PRODUCT_INFO","FilterCriteria","LINES","ACTION_FIGURES","PRODUCT_LINES","convertArrayToObject","array","initialValue","reduce","item","newKey","replace","toUpperCase","PRODUCT_LINES_OBJ","ASSORTMENT","BLACK_SERIES_6","ASSORMENTS","ACTION_FIGURE_PRODUCT_LINE","GET_SPECIFIC_ASSORTMENT","productLine","specificAssortment","forEach","assortment","GET_ASSORTMENT","allAssort","values","flat","ALL_ASSORTMENT"],"mappings":"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","sourcesContent":["import { DOMAIN_CONSTANTS } from 'shared/constants/domainConstants';\n\nexport const MOVIE_NAMES = Object.keys(DOMAIN_CONSTANTS.SOURCE.MOVIES).map(function(key) {\n    return DOMAIN_CONSTANTS.SOURCE.MOVIES[key].NAME;\n});\n\nconst getAllKeysInArrayFormat = obj => Object.keys(obj).map(function(key) {\n    return obj[key];\n});\n\nexport const GROUP_NAMES = getAllKeysInArrayFormat(DOMAIN_CONSTANTS.GROUPS);\nexport const VERSIONS = getAllKeysInArrayFormat(DOMAIN_CONSTANTS.VERSIONS);\nexport const TV_SHOWS = getAllKeysInArrayFormat(DOMAIN_CONSTANTS.SOURCE.TV_SHOWS);\nexport const VIDEO_GAME = getAllKeysInArrayFormat(DOMAIN_CONSTANTS.SOURCE.VIDEO_GAME);\nexport const ALL_SOURCE_NAMES = MOVIE_NAMES.concat(TV_SHOWS).concat(VIDEO_GAME);\nexport const MOVIE_FORMATS = getAllKeysInArrayFormat(DOMAIN_CONSTANTS.SOURCE.MOVIE_MEDIA_FORMATS);\nexport const CHARACTER_NAMES = getAllKeysInArrayFormat(DOMAIN_CONSTANTS.CHARATERS);\nexport const PRODUCT_TYPE = getAllKeysInArrayFormat(DOMAIN_CONSTANTS.PRODUCT.TYPE);\nexport const GET_PRODUCT_TYPE = demoMode => {\n    return demoMode\n        ? ['Action Figures','Movies','Video Games']\n        : PRODUCT_TYPE;\n};\nexport const PRODUCT_TYPE_DETAILS = DOMAIN_CONSTANTS.PRODUCT.TYPE;\nexport const VIDEO_GAME_SYSTEMS = getAllKeysInArrayFormat(DOMAIN_CONSTANTS.PRODUCT.VIDEO_GAMES.SYSTEMS);\nexport const MOVIE_SETS = DOMAIN_CONSTANTS.SOURCE.MOVIE_SETS;\n\nconst PRODUCT_INFO = FilterCriteria => {\n    return Object.keys(DOMAIN_CONSTANTS.PRODUCT.LINES.ACTION_FIGURES).map(function(key) {\n        return DOMAIN_CONSTANTS.PRODUCT.LINES.ACTION_FIGURES[key][FilterCriteria];\n    });\n};\nexport const PRODUCT_LINES = PRODUCT_INFO('NAME');\n\nconst convertArrayToObject = array => {\n    const initialValue = {};\n    return array.reduce((obj, item) => {\n        const newKey = item.replace(/\\s/g, '_').replace(/[^a-zA-Z ]/g, '').toUpperCase();\n        return {\n            ...obj,\n            [newKey]: item,\n        };\n    }, initialValue);\n};\n\nexport const PRODUCT_LINES_OBJ = convertArrayToObject(PRODUCT_LINES);\n\nexport const ASSORTMENT = DOMAIN_CONSTANTS.PRODUCT.LINES.ACTION_FIGURES.BLACK_SERIES_6.ASSORMENTS;\n\nexport const ACTION_FIGURE_PRODUCT_LINE = DOMAIN_CONSTANTS.PRODUCT.LINES.ACTION_FIGURES;\n\nexport const GET_SPECIFIC_ASSORTMENT = productLine => {\n    let specificAssortment;\n    if(productLine){\n        Object.keys(ACTION_FIGURE_PRODUCT_LINE).forEach(assortment => {\n            if(ACTION_FIGURE_PRODUCT_LINE[assortment].NAME === productLine){\n                specificAssortment = ACTION_FIGURE_PRODUCT_LINE[assortment].ASSORMENTS;\n            } \n        });\n    }\n    return specificAssortment;\n};\n\nconst GET_ASSORTMENT = () => {\n    let allAssort =  Object.keys(ACTION_FIGURE_PRODUCT_LINE).map(function(key) {\n        return Object.values(ACTION_FIGURE_PRODUCT_LINE[key].ASSORMENTS);\n    });\n    return allAssort.flat();\n};\n\nexport const ALL_ASSORTMENT = GET_ASSORTMENT();\n"]},"metadata":{},"sourceType":"module"}