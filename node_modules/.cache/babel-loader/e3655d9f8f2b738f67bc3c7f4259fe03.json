{"ast":null,"code":"function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport KeyEventType from '../../const/KeyEventType';\nimport ModifierFlagsDictionary from '../../const/ModifierFlagsDictionary';\nimport Logger from '../logging/Logger';\nimport KeyCombinationSerializer from '../shared/KeyCombinationSerializer';\nimport Configuration from '../config/Configuration';\nimport KeyHistory from '../listening/KeyHistory';\nimport KeyCombination from '../listening/KeyCombination';\nimport ComponentTree from '../definitions/ComponentTree';\nimport ComponentOptionsList from '../definitions/ComponentOptionsList';\nimport ActionResolver from '../matching/ActionResolver';\nimport arrayFrom from '../../utils/array/arrayFrom';\nimport isObject from '../../utils/object/isObject';\nimport isUndefined from '../../utils/isUndefined';\nimport copyAttributes from '../../utils/object/copyAttributes';\nimport hasKey from '../../utils/object/hasKey';\nimport describeKeyEventType from '../../helpers/logging/describeKeyEventType';\nimport printComponent from '../../helpers/logging/printComponent';\nimport hasKeyPressEvent from '../../helpers/resolving-handlers/hasKeyPressEvent';\nimport keyupIsHiddenByCmd from '../../helpers/resolving-handlers/keyupIsHiddenByCmd';\nimport stateFromEvent from '../../helpers/parsing-key-maps/stateFromEvent';\nvar SEQUENCE_ATTRIBUTES = ['sequence', 'action'];\nvar KEYMAP_ATTRIBUTES = ['name', 'description', 'group'];\n/**\n * Defines common behaviour for key event strategies\n * @abstract\n * @class\n */\n\nvar AbstractKeyEventStrategy =\n/*#__PURE__*/\nfunction () {\n  /********************************************************************************\n   * Init & Reset\n   ********************************************************************************/\n\n  /**\n   * Creates a new instance of an event strategy (this class is an abstract one and\n   * not intended to be instantiated directly).\n   * @param {Object} options Options for how event strategy should behave\n   * @param {Logger} options.logger The Logger to use to report event strategy actions\n   * @param {KeyEventManager} keyEventManager KeyEventManager used for passing\n   *        messages between key event strategies\n   */\n  function AbstractKeyEventStrategy() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var keyEventManager = arguments.length > 1 ? arguments[1] : undefined;\n\n    _classCallCheck(this, AbstractKeyEventStrategy);\n\n    this.logger = options.logger || new Logger('warn');\n    /**\n     * @typedef {number} ComponentId Unique index associated with every HotKeys component\n     * as it becomes active.\n     *\n     * For focus-only components, this happens when the component is focused. The HotKeys\n     * component closest to the DOM element in focus gets the smallest number (0) and\n     * those further up the render tree get larger (incrementing) numbers. When a different\n     * element is focused (triggering the creation of a new focus tree) all component indexes\n     * are reset (de-allocated) and re-assigned to the new tree of HotKeys components that\n     * are now in focus.\n     *\n     * For global components, component indexes are assigned when a HotKeys component is\n     * mounted, and de-allocated when it unmounts. The component index counter is never reset\n     * back to 0 and just keeps incrementing as new components are mounted.\n     */\n\n    /**\n     * Counter to maintain what the next component index should be\n     * @type {ComponentId}\n     */\n\n    this.componentId = -1;\n    /**\n     * Reference to key event manager, so that information may pass between the\n     * global strategy and the focus-only strategy\n     * @type {KeyEventManager}\n     */\n\n    this.keyEventManager = keyEventManager;\n    this._componentTree = new ComponentTree();\n    this.rootComponentId = null;\n\n    this._reset();\n\n    this.resetKeyHistory();\n  }\n  /**\n   * Resets all strategy state to the values it had when it was first created\n   * @protected\n   */\n\n\n  _createClass(AbstractKeyEventStrategy, [{\n    key: \"_reset\",\n    value: function _reset() {\n      this.componentList = new ComponentOptionsList();\n\n      this._initHandlerResolutionState();\n    }\n  }, {\n    key: \"_newKeyHistory\",\n    value: function _newKeyHistory() {\n      return new KeyHistory({\n        maxLength: this.componentList.getLongestSequence()\n      });\n    }\n  }, {\n    key: \"getKeyHistory\",\n    value: function getKeyHistory() {\n      if (this._keyHistory) {\n        return this._keyHistory;\n      } else {\n        this._keyHistory = this._newKeyHistory();\n      }\n\n      return this._keyHistory;\n    }\n    /**\n     * Resets the state of the values used to resolve which handler function should be\n     * called when key events match a registered key map\n     * @protected\n     */\n\n  }, {\n    key: \"_initHandlerResolutionState\",\n    value: function _initHandlerResolutionState() {\n      this._actionResolver = null;\n    }\n    /**\n     * Reset the state values that record the current and recent state of key events\n     * @param {Object} options An options hash\n     * @param {boolean} options.force Whether to force a hard reset of the key\n     *        combination history.\n     */\n\n  }, {\n    key: \"resetKeyHistory\",\n    value: function resetKeyHistory() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.keypressEventsToSimulate = [];\n      this.keyupEventsToSimulate = [];\n\n      if (this.getKeyHistory().any() && !options.force) {\n        this._keyHistory = new KeyHistory({\n          maxLength: this.componentList.getLongestSequence()\n        }, new KeyCombination(this.getCurrentCombination().keysStillPressedDict()));\n      } else {\n        this._keyHistory = this._newKeyHistory();\n      }\n    }\n    /********************************************************************************\n     * Generating key maps\n     ********************************************************************************/\n\n    /**\n     * Returns a mapping of all of the application's actions and the key sequences\n     * needed to trigger them.\n     *\n     * @returns {ApplicationKeyMap} The application's key map\n     */\n\n  }, {\n    key: \"getApplicationKeyMap\",\n    value: function getApplicationKeyMap() {\n      if (this.rootComponentId === null) {\n        return {};\n      }\n\n      return this._buildApplicationKeyMap([this.rootComponentId], {});\n    }\n  }, {\n    key: \"_buildApplicationKeyMap\",\n    value: function _buildApplicationKeyMap(componentIds, keyMapSummary) {\n      var _this = this;\n\n      componentIds.forEach(function (componentId) {\n        var _this$_componentTree$ = _this._componentTree.get(componentId),\n            childIds = _this$_componentTree$.childIds,\n            keyMap = _this$_componentTree$.keyMap;\n\n        if (keyMap) {\n          Object.keys(keyMap).forEach(function (actionName) {\n            var keyMapConfig = keyMap[actionName];\n            keyMapSummary[actionName] = {};\n\n            if (isObject(keyMapConfig)) {\n              if (hasKey(keyMapConfig, 'sequences')) {\n                /**\n                 * Support syntax:\n                 *  {\n                 *    sequences: [ {sequence: 'a+b', action: 'keyup' }],\n                 *    name: 'My keymap',\n                 *    description: 'Key to press for something special',\n                 *    group: 'Vanity'\n                 *  }\n                 */\n                copyAttributes(keyMapConfig, keyMapSummary[actionName], KEYMAP_ATTRIBUTES);\n                keyMapSummary[actionName].sequences = _this._createSequenceFromConfig(keyMapConfig.sequences);\n              } else {\n                /**\n                 * Support syntax:\n                 * {\n                 *   sequence: 'a+b', action: 'keyup',\n                 *   name: 'My keymap',\n                 *   description: 'Key to press for something special',\n                 *   group: 'Vanity'\n                 * }\n                 */\n                copyAttributes(keyMapConfig, keyMapSummary[actionName], KEYMAP_ATTRIBUTES);\n                keyMapSummary[actionName].sequences = [copyAttributes(keyMapConfig, {}, SEQUENCE_ATTRIBUTES)];\n              }\n            } else {\n              keyMapSummary[actionName].sequences = _this._createSequenceFromConfig(keyMapConfig);\n            }\n          });\n        }\n\n        _this._buildApplicationKeyMap(childIds, keyMapSummary);\n      });\n      return keyMapSummary;\n    }\n  }, {\n    key: \"_createSequenceFromConfig\",\n    value: function _createSequenceFromConfig(keyMapConfig) {\n      return arrayFrom(keyMapConfig).map(function (sequenceOrKeyMapOptions) {\n        if (isObject(sequenceOrKeyMapOptions)) {\n          /**\n           * Support syntax:\n           * [\n           *   { sequence: 'a+b', action: 'keyup' },\n           *   { sequence: 'c' }\n           * ]\n           */\n          return copyAttributes(sequenceOrKeyMapOptions, {}, SEQUENCE_ATTRIBUTES);\n        } else {\n          /**\n           * Support syntax:\n           * 'a+b'\n           */\n          return {\n            sequence: sequenceOrKeyMapOptions\n          };\n        }\n      });\n    }\n    /********************************************************************************\n     * Registering key maps\n     ********************************************************************************/\n\n    /**\n     * Registers a new mounted component's key map so that it can be included in the\n     * application's key map\n     * @param {KeyMap} keyMap - Map of actions to key expressions\n     * @returns {ComponentId} Unique component ID to assign to the focused HotKeys\n     *          component and passed back when handling a key event\n     */\n\n  }, {\n    key: \"registerKeyMap\",\n    value: function registerKeyMap(keyMap) {\n      this.componentId += 1;\n\n      this._componentTree.add(this.componentId, keyMap);\n\n      this.logger.verbose(this._logPrefix(this.componentId), 'Registered component:\\n', \"\".concat(printComponent(this._componentTree.get(this.componentId))));\n      return this.componentId;\n    }\n    /**\n     * Re-registers (updates) a mounted component's key map\n     * @param {ComponentId} componentId - Id of the component that the keyMap belongs to\n     * @param {KeyMap} keyMap - Map of actions to key expressions\n     */\n\n  }, {\n    key: \"reregisterKeyMap\",\n    value: function reregisterKeyMap(componentId, keyMap) {\n      this._componentTree.update(componentId, keyMap);\n    }\n    /**\n     * Registers that a component has now mounted, and declares its parent hot keys\n     * component id so that actions may be properly resolved\n     * @param {ComponentId} componentId - Id of the component that has mounted\n     * @param {ComponentId} parentId - Id of the parent hot keys component\n     */\n\n  }, {\n    key: \"registerComponentMount\",\n    value: function registerComponentMount(componentId, parentId) {\n      if (!isUndefined(parentId)) {\n        this._componentTree.setParent(componentId, parentId);\n      } else {\n        this.rootComponentId = componentId;\n      }\n\n      this.logger.verbose(this._logPrefix(componentId), 'Registered component mount:\\n', \"\".concat(printComponent(this._componentTree.get(componentId))));\n    }\n    /**\n     * De-registers (removes) a mounted component's key map from the registry\n     * @param {ComponentId} componentId - Id of the component that the keyMap\n     *        belongs to\n     */\n\n  }, {\n    key: \"deregisterKeyMap\",\n    value: function deregisterKeyMap(componentId) {\n      this._componentTree.remove(componentId);\n\n      this.logger.verbose(this._logPrefix(componentId), 'De-registered component. Remaining component Registry:\\n', \"\".concat(printComponent(this._componentTree.toJSON())));\n\n      if (componentId === this.rootComponentId) {\n        this.rootComponentId = null;\n      }\n    }\n    /********************************************************************************\n     * Registering key maps and handlers\n     ********************************************************************************/\n\n    /**\n     * Registers the hotkeys defined by a HotKeys component\n     * @param {ComponentId} componentId - Index of the component\n     * @param {KeyMap} actionNameToKeyMap - Definition of actions and key maps defined\n     *        in the HotKeys component\n     * @param {HandlersMap} actionNameToHandlersMap - Map of ActionNames to handlers\n     *        defined in the HotKeys component\n     * @param {Object} options - Hash of options that configure how the key map is built.\n     * @protected\n     */\n\n  }, {\n    key: \"_addComponent\",\n    value: function _addComponent(componentId) {\n      var actionNameToKeyMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var actionNameToHandlersMap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var options = arguments.length > 3 ? arguments[3] : undefined;\n      this.componentList.add(componentId, actionNameToKeyMap, actionNameToHandlersMap, options);\n      this.getKeyHistory().setMaxLength(this.componentList.getLongestSequence());\n    }\n    /********************************************************************************\n     * Recording key events\n     ********************************************************************************/\n\n    /**\n     * Whether there are any keys in the current combination still being pressed\n     * @returns {boolean} True if all keys in the current combination are released\n     * @protected\n     */\n\n  }, {\n    key: \"_allKeysAreReleased\",\n    value: function _allKeysAreReleased() {\n      return this.getCurrentCombination().hasEnded();\n    }\n  }, {\n    key: \"getCurrentCombination\",\n    value: function getCurrentCombination() {\n      return this.getKeyHistory().getCurrentCombination();\n    }\n  }, {\n    key: \"_shouldSimulate\",\n    value: function _shouldSimulate(eventType, keyName) {\n      var keyHasNativeKeyPress = hasKeyPressEvent(keyName);\n      var currentCombination = this.getCurrentCombination();\n\n      if (eventType === KeyEventType.keypress) {\n        return !keyHasNativeKeyPress || keyHasNativeKeyPress && currentCombination.isKeyStillPressed('Meta');\n      } else if (eventType === KeyEventType.keyup) {\n        return keyupIsHiddenByCmd(keyName) && currentCombination.isKeyReleased('Meta');\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_cloneAndMergeEvent\",\n    value: function _cloneAndMergeEvent(event, extra) {\n      var eventAttributes = Object.keys(ModifierFlagsDictionary).reduce(function (memo, eventAttribute) {\n        memo[eventAttribute] = event[eventAttribute];\n        return memo;\n      }, {});\n      return _objectSpread({}, eventAttributes, extra);\n    }\n    /********************************************************************************\n     * Matching and calling handlers\n     ********************************************************************************/\n\n  }, {\n    key: \"_callClosestMatchingHandler\",\n    value: function _callClosestMatchingHandler(event, keyName, keyEventType, componentPosition, componentSearchIndex) {\n      if (!this._actionResolver) {\n        this._actionResolver = new ActionResolver(this.componentList);\n      }\n\n      while (componentSearchIndex <= componentPosition) {\n        var keyHistoryMatcher = this._actionResolver.getKeyHistoryMatcher(componentSearchIndex);\n\n        this.logger.verbose(this._logPrefix(componentSearchIndex), 'Internal key mapping:\\n', \"\".concat(printComponent(keyHistoryMatcher.toJSON())));\n\n        var sequenceMatch = this._actionResolver.findMatchingKeySequenceInComponent(componentSearchIndex, this.getKeyHistory(), keyName, keyEventType);\n\n        var currentCombination = this.getCurrentCombination();\n\n        if (sequenceMatch) {\n          var eventSchema = sequenceMatch.events[keyEventType];\n\n          if (Configuration.option('allowCombinationSubmatches')) {\n            var subMatchDescription = KeyCombinationSerializer.serialize(sequenceMatch.keyDictionary);\n            this.logger.debug(this._logPrefix(componentSearchIndex), \"Found action that matches '\".concat(currentCombination.describe(), \"' (sub-match: '\").concat(subMatchDescription, \"'): \").concat(eventSchema.actionName, \". Calling handler . . .\"));\n          } else {\n            this.logger.debug(this._logPrefix(componentSearchIndex), \"Found action that matches '\".concat(currentCombination.describe(), \"': \").concat(eventSchema.actionName, \". Calling handler . . .\"));\n          }\n\n          eventSchema.handler(event);\n\n          this._stopEventPropagationAfterHandlingIfEnabled(event, componentSearchIndex);\n\n          return true;\n        } else {\n          if (this._actionResolver.componentHasActionsBoundToEventType(componentSearchIndex, keyEventType)) {\n            var eventName = describeKeyEventType(keyEventType);\n            this.logger.debug(this._logPrefix(componentSearchIndex), \"No matching actions found for '\".concat(currentCombination.describe(), \"' \").concat(eventName, \".\"));\n          } else {\n            this.logger.debug(this._logPrefix(componentSearchIndex), \"Doesn't define a handler for '\".concat(currentCombination.describe(), \"' \").concat(describeKeyEventType(keyEventType), \".\"));\n          }\n        }\n\n        componentSearchIndex++;\n      }\n    }\n  }, {\n    key: \"_stopEventPropagationAfterHandlingIfEnabled\",\n    value: function _stopEventPropagationAfterHandlingIfEnabled(event, componentId) {\n      if (Configuration.option('stopEventPropagationAfterHandling')) {\n        this._stopEventPropagation(event, componentId);\n\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_stopEventPropagation\",\n    value: function _stopEventPropagation(event, componentId) {\n      throw new Error('_stopEventPropagation must be overridden by a subclass');\n    }\n    /**\n     * Synchronises the key combination history to match the modifier key flag attributes\n     * on new key events\n     * @param {KeyboardEvent} event - Event to check the modifier flags for\n     * @param {string} key - Name of key that events relates to\n     * @param {KeyEventType} keyEventType - The record index of the current\n     *        key event type\n     * @protected\n     */\n\n  }, {\n    key: \"_checkForModifierFlagDiscrepancies\",\n    value: function _checkForModifierFlagDiscrepancies(event, key, keyEventType) {\n      var _this2 = this;\n      /**\n       * If a new key event is received with modifier key flags that contradict the\n       * key combination history we are maintaining, we can surmise that some keyup events\n       * for those modifier keys have been lost (possibly because the window lost focus).\n       * We update the key combination to match the modifier flags\n       */\n\n\n      Object.keys(ModifierFlagsDictionary).forEach(function (modifierKey) {\n        /**\n         * When a modifier key is being released (keyup), it sets its own modifier flag\n         * to false. (e.g. On the keyup event for Command, the metaKey attribute is false).\n         * If this the case, we want to handle it using the main algorithm and skip the\n         * reconciliation algorithm.\n         */\n        if (key === modifierKey && keyEventType === KeyEventType.keyup) {\n          return;\n        }\n\n        var currentCombination = _this2.getCurrentCombination();\n\n        var modifierStillPressed = currentCombination.isKeyStillPressed(modifierKey);\n        ModifierFlagsDictionary[modifierKey].forEach(function (attributeName) {\n          if (event[attributeName] === false && modifierStillPressed) {\n            currentCombination.setKeyState(modifierKey, KeyEventType.keyup, stateFromEvent(event));\n          }\n        });\n      });\n    }\n    /**\n     * Returns a prefix for all log entries related to the current event strategy\n     * @protected\n     * @abstract\n     */\n\n  }, {\n    key: \"_logPrefix\",\n    value: function _logPrefix() {}\n  }]);\n\n  return AbstractKeyEventStrategy;\n}();\n\nexport default AbstractKeyEventStrategy;","map":null,"metadata":{},"sourceType":"module"}