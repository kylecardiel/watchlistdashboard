{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport KeyHistoryMatcher from './KeyHistoryMatcher';\n/**\n * Resolves the correct actions to trigger for a list of hotkeys components and a\n * history of key events\n * @class\n */\n\nvar ActionResolver =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Creates a new instance of ActionResolver\n   * @param {ComponentOptionsList} componentList List of components\n   * @returns {ActionResolver}\n   */\n  function ActionResolver(componentList) {\n    _classCallCheck(this, ActionResolver);\n    /**\n     * List of mappings from key sequences to handlers that is constructed on-the-fly\n     * as key events propagate up the render tree\n     * @type {KeyHistoryMatcher[]}\n     */\n\n\n    this._keyMapMatchers = [];\n    /**\n     * Array of counters - one for each component - to keep track of how many handlers\n     * for that component still need actions assigned to them\n     * @type {Array.<Number,Object>}\n     */\n\n    this._unmatchedHandlerStatus = [];\n    /**\n     * A dictionary mapping action names to the position in the list of the components\n     * that define handlers for them\n     * @type {Object.<ActionName, Number[]>}\n     */\n\n    this._handlersDictionary = {};\n    /**\n     * A dictionary of sequences already encountered in the process of building the\n     * list of keyMaps on the fly, as key events propagate up the component tree\n     * @type {Object.<MouseTrapKeySequence, Number[]>}\n     */\n\n    this._keySequencesDictionary = {};\n    var iterator = componentList.getNewIterator();\n\n    while (iterator.next()) {\n      var _iterator$getComponen = iterator.getComponent(),\n          handlers = _iterator$getComponen.handlers;\n\n      this._unmatchedHandlerStatus.push([Object.keys(handlers).length, {}]);\n\n      this._keyMapMatchers.push(new KeyHistoryMatcher());\n    }\n\n    this._componentList = componentList;\n    this._componentListIterator = componentList.getNewIterator();\n  }\n  /**\n   * The KeyHistoryMatcher for the component in a particular position\n   * @param {number} componentPosition Position of component to find the\n   *        KeyHistoryMatcher for\n   * @returns {KeyHistoryMatcher} Key combination matcher that corresponds\n   *        to the component\n   */\n\n\n  _createClass(ActionResolver, [{\n    key: \"getKeyHistoryMatcher\",\n    value: function getKeyHistoryMatcher(componentPosition) {\n      if (this._componentHasUnmatchedHandlers(componentPosition)) {\n        /**\n         * We build the mapping between actions and their closest handlers the\n         * first time the key map for the component at <tt>position</tt> is accessed.\n         *\n         * We must search higher than the current component for actions, as they are\n         * often defined in parent components of those that ultimately define their\n         * handlers.\n         */\n        while (this._componentListIterator.next()) {\n          this._addHandlersFromComponent();\n\n          this._addActionsFromComponent();\n        }\n      }\n\n      return this._getKeyHistoryMatcher(componentPosition);\n    }\n    /**\n     * Whether a component has one or more actions bound to an event type\n     * @param {number} componentPosition Position of the component\n     * @param {KeyEventType} keyEventType\n     * @returns {boolean} true if the component has an action bound to the event type\n     */\n\n  }, {\n    key: \"componentHasActionsBoundToEventType\",\n    value: function componentHasActionsBoundToEventType(componentPosition, keyEventType) {\n      return this.getKeyHistoryMatcher(componentPosition).hasMatchesForEventType(keyEventType);\n    }\n    /**\n     * Finds matcher for sequence and current key event for a component at a position\n     * @param {number} componentPosition Position of the component\n     * @param {KeyHistory} keyHistory History of key combinations to match\n     *        against actions defined in component\n     * @param {ReactKeyName} keyName Name of the key the current event relates to\n     * @param {KeyEventType} keyEventType Type of key event\n     * @returns {Object|null}\n     */\n\n  }, {\n    key: \"findMatchingKeySequenceInComponent\",\n    value: function findMatchingKeySequenceInComponent(componentPosition, keyHistory, keyName, keyEventType) {\n      if (!this.componentHasActionsBoundToEventType(componentPosition, keyEventType)) {\n        return null;\n      }\n\n      return this.getKeyHistoryMatcher(componentPosition).findMatch(keyHistory, keyName, keyEventType);\n    }\n    /********************************************************************************\n     * Private methods\n     *********************************************************************************/\n\n  }, {\n    key: \"_getKeyHistoryMatcher\",\n    value: function _getKeyHistoryMatcher(index) {\n      return this._keyMapMatchers[index];\n    }\n  }, {\n    key: \"_addActionsFromComponent\",\n    value: function _addActionsFromComponent() {\n      var _this = this;\n\n      var _this$_componentListI = this._componentListIterator.getComponent(),\n          actions = _this$_componentListI.actions;\n      /**\n       * Iterate over the actions of a component (starting with the current component\n       * and working through its ancestors), matching them to the current component's\n       * handlers\n       */\n\n\n      Object.keys(actions).forEach(function (actionName) {\n        var handlerComponentIndexArray = _this._getHandlers(actionName);\n\n        if (handlerComponentIndexArray) {\n          /**\n           * Get action handler closest to the event target\n           */\n          var handlerComponentIndex = handlerComponentIndexArray[0];\n\n          var handler = _this._componentList.getAtPosition(handlerComponentIndex).handlers[actionName];\n          /**\n           * Get key map that corresponds with the component that defines the handler\n           * closest to the event target\n           */\n\n\n          var keyMapMatcher = _this._getKeyHistoryMatcher(handlerComponentIndex);\n          /**\n           * At least one child HotKeys component (or the component itself) has\n           * defined a handler for the action, so now we need to associate them\n           */\n\n\n          var actionOptionsList = actions[actionName];\n          actionOptionsList.forEach(function (actionOptions) {\n            var keySequence = [actionOptions.prefix, actionOptions.id].join(' ');\n\n            if (_this._isClosestHandlerFound(keySequence, actionOptions)) {\n              /**\n               * Return if there is already a component with handlers for the current\n               * key sequence closer to the event target\n               */\n              return;\n            }\n\n            keyMapMatcher.addMatch(actionOptions, handler);\n\n            _this._addKeySequence(keySequence, [handlerComponentIndex, actionOptions.keyEventType]);\n          });\n          handlerComponentIndexArray.forEach(function (handlerComponentIndex) {\n            var handlerComponentStatus = _this._getUnmatchedHandlerStatus(handlerComponentIndex);\n\n            if (!handlerComponentStatus[1][actionName]) {\n              handlerComponentStatus[1][actionName] = true;\n              /**\n               * Decrement the number of remaining unmatched handlers for the\n               * component currently handling the propagating key event, so we know\n               * when all handlers have been matched to sequences and we can move on\n               * to matching them against the current key event\n               */\n\n              handlerComponentStatus[0]--;\n            }\n          });\n        }\n      });\n    }\n  }, {\n    key: \"_getHandlers\",\n    value: function _getHandlers(actionName) {\n      return this._handlersDictionary[actionName];\n    }\n  }, {\n    key: \"_addHandlersFromComponent\",\n    value: function _addHandlersFromComponent() {\n      var _this2 = this;\n\n      var _this$_componentListI2 = this._componentListIterator.getComponent(),\n          handlers = _this$_componentListI2.handlers;\n      /**\n       * Add current component's handlers to the handlersDictionary so we know\n       * which component has defined them\n       */\n\n\n      Object.keys(handlers).forEach(function (actionName) {\n        _this2._addHandler(actionName);\n      });\n    }\n  }, {\n    key: \"_addHandler\",\n    value: function _addHandler(actionName) {\n      if (!this._handlersDictionary[actionName]) {\n        this._handlersDictionary[actionName] = [];\n      }\n\n      this._handlersDictionary[actionName].push(this._componentListIterator.getPosition());\n    }\n  }, {\n    key: \"_addKeySequence\",\n    value: function _addKeySequence(keySequence, value) {\n      /**\n       * Record that we have already found a handler for the current action so\n       * that we do not override handlers for an action closest to the event target\n       * with handlers further up the tree\n       */\n      if (!this._keySequencesDictionary[keySequence]) {\n        this._keySequencesDictionary[keySequence] = [];\n      }\n\n      this._keySequencesDictionary[keySequence].push(value);\n    }\n  }, {\n    key: \"_componentHasUnmatchedHandlers\",\n    value: function _componentHasUnmatchedHandlers(componentIndex) {\n      return this._getUnmatchedHandlerStatus(componentIndex)[0] > 0;\n    }\n  }, {\n    key: \"_getUnmatchedHandlerStatus\",\n    value: function _getUnmatchedHandlerStatus(index) {\n      return this._unmatchedHandlerStatus[index];\n    }\n  }, {\n    key: \"_isClosestHandlerFound\",\n    value: function _isClosestHandlerFound(keySequence, keyMatcher) {\n      return this._keySequencesDictionary[keySequence] && this._keySequencesDictionary[keySequence].some(function (dictEntry) {\n        return dictEntry[1] === keyMatcher.keyEventType;\n      });\n    }\n  }]);\n\n  return ActionResolver;\n}();\n\nexport default ActionResolver;","map":null,"metadata":{},"sourceType":"module"}