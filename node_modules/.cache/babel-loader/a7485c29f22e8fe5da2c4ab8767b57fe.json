{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport Registry from '../shared/Registry';\nimport without from '../../utils/collection/without';\n/**\n * @typedef {Object} ComponentRegistryEntry\n * @property {ComponentId[]} childIds List of ids of the children of a component\n * @property {ComponentId|null} parentIds Id of the parent component\n */\n\n/**\n * Registry of hot keys components, mapping children to their parents and vice versa\n * @class\n */\n\nvar ComponentTree =\n/*#__PURE__*/\nfunction (_Registry) {\n  _inherits(ComponentTree, _Registry);\n\n  function ComponentTree() {\n    _classCallCheck(this, ComponentTree);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ComponentTree).apply(this, arguments));\n  }\n\n  _createClass(ComponentTree, [{\n    key: \"add\",\n\n    /**\n     * Register a component\n     * @param {ComponentId} componentId Id of the component to register\n     * @param {KeyMap} keyMap - Map of actions to key expressions\n     * @returns {void}\n     */\n    value: function add(componentId, keyMap) {\n      _get(_getPrototypeOf(ComponentTree.prototype), \"set\", this).call(this, componentId, {\n        childIds: [],\n        parentId: null,\n        keyMap: keyMap\n      });\n    }\n    /**\n     * Updates an existing component's key map\n     * @param {ComponentId} componentId Id of the component to register\n     * @param {KeyMap} keyMap - Map of actions to key expressions\n     * @returns {void}\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(componentId, keyMap) {\n      var component = _get(_getPrototypeOf(ComponentTree.prototype), \"get\", this).call(this, componentId);\n\n      _get(_getPrototypeOf(ComponentTree.prototype), \"set\", this).call(this, componentId, _objectSpread({}, component, {\n        keyMap: keyMap\n      }));\n    }\n    /**\n     * Set the parent ID of a component\n     * @param {ComponentId} componentId Id of the component\n     * @param {ComponentId} parentId Id of the parent\n     * @returns {void}\n     */\n\n  }, {\n    key: \"setParent\",\n    value: function setParent(componentId, parentId) {\n      this.get(componentId).parentId = parentId;\n\n      this._addChildId(parentId, componentId);\n    }\n    /**\n     * Deregister a component\n     * @param {ComponentId} componentId Id of the component to remove\n     * @returns {void}\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(componentId) {\n      var parentId = this._getParentId(componentId);\n\n      this._removeChildId(parentId, componentId);\n\n      _get(_getPrototypeOf(ComponentTree.prototype), \"remove\", this).call(this, componentId);\n    }\n    /********************************************************************************\n     * Private methods\n     ********************************************************************************/\n\n  }, {\n    key: \"_getParentId\",\n    value: function _getParentId(componentId) {\n      var component = this.get(componentId);\n      return component && component.parentId;\n    }\n  }, {\n    key: \"_addChildId\",\n    value: function _addChildId(parentId, componentId) {\n      this.get(parentId).childIds.push(componentId);\n    }\n  }, {\n    key: \"_removeChildId\",\n    value: function _removeChildId(parentId, childId) {\n      var parent = this.get(parentId);\n\n      if (parent) {\n        parent.childIds = without(parent.childIds, childId);\n      }\n    }\n  }]);\n\n  return ComponentTree;\n}(Registry);\n\nexport default ComponentTree;","map":null,"metadata":{},"sourceType":"module"}