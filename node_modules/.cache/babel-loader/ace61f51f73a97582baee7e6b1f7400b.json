{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport PropTypes from 'prop-types';\nimport React, { PureComponent } from 'react';\nimport Configuration from './lib/config/Configuration';\nimport KeyEventManager from './lib/KeyEventManager';\nimport isEmpty from './utils/collection/isEmpty';\nimport KeyCombinationSerializer from './lib/shared/KeyCombinationSerializer';\nimport backwardsCompatibleContext from './utils/backwardsCompatibleContext';\nimport isUndefined from './utils/isUndefined';\n/**\n * Wraps a React component in a HotKeysEnabled component, which passes down the\n * callbacks and options necessary for React Hotkeys to work as a single prop value,\n * hotkeys. These must be unwrapped and applied to a DOM-mountable element within\n * the wrapped component (e.g. div, span, input, etc) in order for the key events\n * to be recorded.\n *\n * @param {React.ComponentClass} Component - Component class to wrap\n * @param {Object} hotKeysOptions - Options that become the wrapping component's\n *                 default prop values\n * @returns {React.ComponentClass} Wrapped component that is passed all of the React hotkeys\n * props in a single value, hotkeys.\n */\n\nfunction withHotKeys(Component) {\n  var hotKeysOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  function mergeWithOptions(key, props) {\n    return _objectSpread({}, hotKeysOptions[key] || {}, props[key] || {});\n  }\n\n  function getHandlers(props) {\n    return mergeWithOptions('handlers', props);\n  }\n\n  function getKeyMap(props) {\n    return mergeWithOptions('keyMap', props);\n  }\n  /**\n   * Component that listens to key events when one of its children are in focus and\n   * selectively triggers actions (that may be handled by handler functions) when a\n   * sequence of events matches a list of pre-defined sequences or combinations\n   * @class\n   */\n\n\n  var HotKeysEnabled =\n  /*#__PURE__*/\n  function (_PureComponent) {\n    _inherits(HotKeysEnabled, _PureComponent);\n\n    function HotKeysEnabled(props) {\n      var _this;\n\n      _classCallCheck(this, HotKeysEnabled);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(HotKeysEnabled).call(this, props));\n      /**\n       * The focus and blur handlers need access to the current component as 'this'\n       * so they need to be bound to it when the component is instantiated\n       */\n\n      _this._handleFocus = _this._handleFocus.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n      _this._handleBlur = _this._handleBlur.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n      _this._handleKeyDown = _this._handleKeyDown.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n      _this._handleKeyPress = _this._handleKeyPress.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n      _this._handleKeyUp = _this._handleKeyUp.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n      _this._componentIsFocused = _this._componentIsFocused.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n      _this._id = KeyEventManager.getInstance().registerKeyMap(props.keyMap);\n      /**\n       * We maintain a separate instance variable to contain context that will be\n       * passed down to descendants of this component so we can have a consistent\n       * reference to the same object, rather than instantiating a new one on each\n       * render, causing unnecessary re-rendering of descendant components that\n       * consume the context.\n       *\n       * @see https://reactjs.org/docs/context.html#caveats\n       */\n\n      _this._childContext = {\n        hotKeysParentId: _this._id\n      };\n      return _this;\n    }\n\n    _createClass(HotKeysEnabled, [{\n      key: \"render\",\n      value: function render() {\n        var _this$props = this.props,\n            keyMap = _this$props.keyMap,\n            handlers = _this$props.handlers,\n            allowChanges = _this$props.allowChanges,\n            root = _this$props.root,\n            props = _objectWithoutProperties(_this$props, [\"keyMap\", \"handlers\", \"allowChanges\", \"root\"]);\n\n        var hotKeys = {\n          onFocus: this._wrapFunction('onFocus', this._handleFocus),\n          onBlur: this._wrapFunction('onBlur', this._handleBlur),\n          tabIndex: Configuration.option('defaultTabIndex')\n        };\n\n        if (this._shouldBindKeyListeners()) {\n          hotKeys.onKeyDown = this._handleKeyDown;\n          hotKeys.onKeyPress = this._handleKeyPress;\n          hotKeys.onKeyUp = this._handleKeyUp;\n        }\n\n        return React.createElement(Component, _extends({\n          hotKeys: hotKeys\n        }, props));\n      }\n    }, {\n      key: \"_shouldBindKeyListeners\",\n      value: function _shouldBindKeyListeners() {\n        var keyMap = getKeyMap(this.props);\n        return !isEmpty(keyMap) || this.props.root || Configuration.option('enableHardSequences') && this._handlersIncludeHardSequences(keyMap, getHandlers(this.props));\n      }\n    }, {\n      key: \"_handlersIncludeHardSequences\",\n      value: function _handlersIncludeHardSequences(keyMap, handlers) {\n        return Object.keys(handlers).some(function (action) {\n          return !keyMap[action] && KeyCombinationSerializer.isValidKeySerialization(action);\n        });\n      }\n    }, {\n      key: \"_wrapFunction\",\n      value: function _wrapFunction(propName, func) {\n        var _this2 = this;\n\n        if (typeof this.props[propName] === 'function') {\n          return function (event) {\n            _this2.props[propName](event);\n\n            func(event);\n          };\n        } else {\n          return func;\n        }\n      }\n    }, {\n      key: \"_focusTreeIdsPush\",\n      value: function _focusTreeIdsPush(componentId) {\n        if (!this._focusTreeIds) {\n          this._focusTreeIds = [];\n        }\n\n        this._focusTreeIds.push(componentId);\n      }\n    }, {\n      key: \"_focusTreeIdsShift\",\n      value: function _focusTreeIdsShift() {\n        if (this._focusTreeIds) {\n          this._focusTreeIds.shift();\n        }\n      }\n    }, {\n      key: \"_getFocusTreeId\",\n      value: function _getFocusTreeId() {\n        if (this._focusTreeIds) {\n          return this._focusTreeIds[0];\n        }\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate() {\n        var keyEventManager = KeyEventManager.getInstance();\n        keyEventManager.reregisterKeyMap(this._id, this.props.keyMap);\n\n        if (this._componentIsFocused() && (this.props.allowChanges || !Configuration.option('ignoreKeymapAndHandlerChangesByDefault'))) {\n          var _this$props2 = this.props,\n              keyMap = _this$props2.keyMap,\n              handlers = _this$props2.handlers;\n          keyEventManager.updateEnabledHotKeys(this._getFocusTreeId(), this._id, keyMap, handlers, this._getComponentOptions());\n        }\n      }\n    }, {\n      key: \"_componentIsFocused\",\n      value: function _componentIsFocused() {\n        return this._focused === true;\n      }\n    }, {\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var keyEventManager = KeyEventManager.getInstance();\n        var hotKeysParentId = this.context.hotKeysParentId;\n        keyEventManager.registerComponentMount(this._id, hotKeysParentId);\n      }\n      /**\n       * Handles when the component gains focus by calling onFocus prop, if defined, and\n       * registering itself with the KeyEventManager\n       * @private\n       */\n\n    }, {\n      key: \"_handleFocus\",\n      value: function _handleFocus() {\n        if (this.props.onFocus) {\n          var _this$props3;\n\n          (_this$props3 = this.props).onFocus.apply(_this$props3, arguments);\n        }\n\n        var focusTreeId = KeyEventManager.getInstance().enableHotKeys(this._id, getKeyMap(this.props), getHandlers(this.props), this._getComponentOptions());\n\n        if (!isUndefined(focusTreeId)) {\n          /**\n           * focusTreeId should never normally be undefined, but this return state is\n           * used to indicate that a component with the same componentId has already\n           * registered as focused/enabled (again, a condition that should not normally\n           * occur, but apparently can for as-yet unknown reasons).\n           *\n           * @see https://github.com/greena13/react-hotkeys/issues/173\n           */\n          this._focusTreeIdsPush(focusTreeId);\n        }\n\n        this._focused = true;\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        var keyEventManager = KeyEventManager.getInstance();\n        keyEventManager.deregisterKeyMap(this._id);\n        keyEventManager.registerComponentUnmount();\n\n        this._handleBlur();\n      }\n      /**\n       * Handles when the component loses focus by calling the onBlur prop, if defined\n       * and removing itself from the KeyEventManager\n       * @private\n       */\n\n    }, {\n      key: \"_handleBlur\",\n      value: function _handleBlur() {\n        if (this.props.onBlur) {\n          var _this$props4;\n\n          (_this$props4 = this.props).onBlur.apply(_this$props4, arguments);\n        }\n\n        var retainCurrentFocusTreeId = KeyEventManager.getInstance().disableHotKeys(this._getFocusTreeId(), this._id);\n\n        if (!retainCurrentFocusTreeId) {\n          this._focusTreeIdsShift();\n        }\n\n        this._focused = false;\n      }\n      /**\n       * Delegates handing the keydown event to the KeyEventManager\n       * @param {KeyboardEvent} event Key board event containing key name and state\n       * @private\n       */\n\n    }, {\n      key: \"_handleKeyDown\",\n      value: function _handleKeyDown(event) {\n        var discardFocusTreeId = KeyEventManager.getInstance().handleKeydown(event, this._getFocusTreeId(), this._id, this._getEventOptions());\n\n        if (discardFocusTreeId) {\n          this._focusTreeIdsShift();\n        }\n      }\n      /**\n       * Delegates handing the keypress event to the KeyEventManager\n       * @param {KeyboardEvent} event Key board event containing key name and state\n       * @private\n       */\n\n    }, {\n      key: \"_handleKeyPress\",\n      value: function _handleKeyPress(event) {\n        var discardFocusTreeId = KeyEventManager.getInstance().handleKeyPress(event, this._getFocusTreeId(), this._id, this._getEventOptions());\n\n        if (discardFocusTreeId) {\n          this._focusTreeIdsShift();\n        }\n      }\n      /**\n       * Delegates handing the keyup event to the KeyEventManager\n       * @param {KeyboardEvent} event Key board event containing key name and state\n       * @private\n       */\n\n    }, {\n      key: \"_handleKeyUp\",\n      value: function _handleKeyUp(event) {\n        var discardFocusTreeId = KeyEventManager.getInstance().handleKeyUp(event, this._getFocusTreeId(), this._id, this._getEventOptions());\n\n        if (discardFocusTreeId) {\n          this._focusTreeIdsShift();\n        }\n      }\n    }, {\n      key: \"_getComponentOptions\",\n      value: function _getComponentOptions() {\n        return {\n          defaultKeyEvent: Configuration.option('defaultKeyEvent')\n        };\n      }\n    }, {\n      key: \"_getEventOptions\",\n      value: function _getEventOptions() {\n        return {\n          ignoreEventsCondition: Configuration.option('ignoreEventsCondition')\n        };\n      }\n    }]);\n\n    return HotKeysEnabled;\n  }(PureComponent);\n\n  _defineProperty(HotKeysEnabled, \"propTypes\", {\n    /**\n     * A unique key to associate with KeyEventMatchers that allows associating handler\n     * functions at a later stage\n     * @typedef {string} ActionName\n     */\n\n    /**\n     * Name of a key event\n     * @typedef {'keyup'|'keydown'|'keypress'} KeyEventName\n     */\n\n    /**\n     * A string or list of strings, that represent a sequence of one or more keys\n     * @typedef {String | Array.<String>} MouseTrapKeySequence\n     * @see {@link https://craig.is/killing/mice} for support key sequences\n     */\n\n    /**\n     * Options for the mapping of a key sequence and event\n     * @typedef {Object} KeyEventOptions\n     * @property {MouseTrapKeySequence} sequence - The key sequence required to satisfy a\n     *           KeyEventDescription\n     * @property {KeyEventName} action - The keyboard state required to satisfy a\n     *           KeyEventDescription\n     * @property {string} name - The name of the action, to be displayed to the end user\n     * @property {string} description - A description of the action, to be displayed to\n     *           the end user\n     * @property {string} group - A group the action belongs to, to aid in showing similar\n     *           actions to the user\n     */\n\n    /**\n     * A description of key sequence of one or more key combinations\n     * @typedef {MouseTrapKeySequence|KeyEventOptions|Array.<MouseTrapKeySequence>} KeyEventDescription\n     */\n\n    /**\n     * A mapping from ActionName to KeyEventDescription\n     * @typedef {Object.<ActionName, KeyEventDescription>} KeyMap\n     */\n\n    /**\n     * A map from action names to Mousetrap or Browser key sequences\n     * @type {KeyMap}\n     */\n    keyMap: PropTypes.object,\n\n    /**\n     * A map from action names to event handler functions\n     * @typedef {Object.<ActionName, Function>} HandlersMap\n     */\n\n    /**\n     * A map from action names to event handler functions\n     * @type {HandlersMap}\n     */\n    handlers: PropTypes.object,\n\n    /**\n     * Function to call when this component gains focus in the browser\n     * @type {function}\n     */\n    onFocus: PropTypes.func,\n\n    /**\n     * Function to call when this component loses focus in the browser\n     * @type {function}\n     */\n    onBlur: PropTypes.func,\n\n    /**\n     * Whether the keyMap or handlers are permitted to change after the\n     * component mounts. If false, changes to the keyMap and handlers\n     * props will be ignored\n     */\n    allowChanges: PropTypes.bool,\n\n    /**\n     * Whether this is the root HotKeys node - this enables some special behaviour\n     */\n    root: PropTypes.bool\n  });\n\n  return backwardsCompatibleContext(HotKeysEnabled, {\n    deprecatedAPI: {\n      contextTypes: {\n        hotKeysParentId: PropTypes.number\n      },\n      childContextTypes: {\n        hotKeysParentId: PropTypes.number\n      }\n    },\n    newAPI: {\n      contextType: {\n        hotKeysParentId: undefined\n      }\n    }\n  });\n}\n\nexport default withHotKeys;","map":null,"metadata":{},"sourceType":"module"}