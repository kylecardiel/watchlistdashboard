{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport isUndefined from '../../utils/isUndefined';\n/**\n * Manages the incrementing of a globally unique event id\n * @class\n */\n\nvar KeyEventCounter =\n/*#__PURE__*/\nfunction () {\n  function KeyEventCounter() {\n    _classCallCheck(this, KeyEventCounter);\n  }\n\n  _createClass(KeyEventCounter, null, [{\n    key: \"getId\",\n\n    /**\n     * Globally unique event id\n     * @typedef {number} EventId\n     */\n\n    /**\n     * Get the current event id\n     * @returns {EventId} The current event ID\n     */\n    value: function getId() {\n      if (isUndefined(this._id)) {\n        this._id = 0;\n      }\n\n      return this._id;\n    }\n    /**\n     * Increment the current event id\n     */\n\n  }, {\n    key: \"incrementId\",\n    value: function incrementId() {\n      this._id = this.getId() + 1;\n    }\n  }]);\n\n  return KeyEventCounter;\n}();\n\nexport default KeyEventCounter;","map":null,"metadata":{},"sourceType":"module"}