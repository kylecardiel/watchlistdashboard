{"ast":null,"code":"function _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nimport hasKey from './object/hasKey';\n\nfunction invertArrayDictionary(dictionary) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return Object.keys(dictionary).reduce(function (memo, key) {\n    var arrayValue = dictionary[key];\n    arrayValue.forEach(function (shiftedKey) {\n      if (!hasKey(memo, shiftedKey)) {\n        memo[shiftedKey] = [];\n      }\n\n      memo[shiftedKey].push(key);\n    });\n\n    if (options.includeOriginal) {\n      if (!hasKey(memo, key)) {\n        memo[key] = [];\n      }\n\n      memo[key] = [].concat(_toConsumableArray(memo[key]), _toConsumableArray(arrayValue));\n    }\n\n    return memo;\n  }, {});\n}\n\nexport default invertArrayDictionary;","map":null,"metadata":{},"sourceType":"module"}