{"ast":null,"code":"import * as actions from 'store/notifications/notificationActions';\nimport { initialState } from 'store/initialState';\nimport cloneDeep from 'lodash/cloneDeep';\nexport const notifications = (state = initialState.notifications, action) => {\n  switch (action.type) {\n    case actions.ADD_NOTIFICATION:\n      {\n        let cloneState = cloneDeep(state);\n\n        if (cloneState.list.length) {\n          cloneState.list.push(action.payload);\n        } else {\n          cloneState.list = [action.payload];\n        }\n\n        return cloneState;\n      }\n\n    case actions.OPEN_NOTIFCIATION_DRAWER:\n    case actions.CLOSE_NOTIFCIATION_DRAWER:\n      {\n        return Object.assign({}, state, {\n          isOpen: action.payload\n        });\n      }\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/kylecardiel/Documents/Development/Frontend/starwarscollection/src/store/notifications/notificationReducer.js"],"names":["actions","initialState","cloneDeep","notifications","state","action","type","ADD_NOTIFICATION","cloneState","list","length","push","payload","OPEN_NOTIFCIATION_DRAWER","CLOSE_NOTIFCIATION_DRAWER","Object","assign","isOpen"],"mappings":"AAAA,OAAO,KAAKA,OAAZ,MAAyB,yCAAzB;AACA,SAASC,YAAT,QAA6B,oBAA7B;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AAEA,OAAO,MAAMC,aAAa,GAAG,CAACC,KAAK,GAAGH,YAAY,CAACE,aAAtB,EAAqCE,MAArC,KAAgD;AACzE,UAAQA,MAAM,CAACC,IAAf;AACA,SAAKN,OAAO,CAACO,gBAAb;AAA+B;AAC3B,YAAIC,UAAU,GAAGN,SAAS,CAACE,KAAD,CAA1B;;AACA,YAAII,UAAU,CAACC,IAAX,CAAgBC,MAApB,EAA2B;AACvBF,UAAAA,UAAU,CAACC,IAAX,CAAgBE,IAAhB,CAAqBN,MAAM,CAACO,OAA5B;AACH,SAFD,MAEO;AACHJ,UAAAA,UAAU,CAACC,IAAX,GAAkB,CAACJ,MAAM,CAACO,OAAR,CAAlB;AACH;;AAED,eAAOJ,UAAP;AACH;;AACD,SAAKR,OAAO,CAACa,wBAAb;AACA,SAAKb,OAAO,CAACc,yBAAb;AAAwC;AACpC,eAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBZ,KAAlB,EAAyB;AAAEa,UAAAA,MAAM,EAAEZ,MAAM,CAACO;AAAjB,SAAzB,CAAP;AACH;;AACD;AACI,aAAOR,KAAP;AAhBJ;AAkBH,CAnBM","sourcesContent":["import * as actions from 'store/notifications/notificationActions';\nimport { initialState } from 'store/initialState';\nimport cloneDeep from 'lodash/cloneDeep';\n\nexport const notifications = (state = initialState.notifications, action) => {\n    switch (action.type) {\n    case actions.ADD_NOTIFICATION: {\n        let cloneState = cloneDeep(state);\n        if (cloneState.list.length){\n            cloneState.list.push(action.payload);\n        } else {\n            cloneState.list = [action.payload]\n        }\n        \n        return cloneState;\n    }\n    case actions.OPEN_NOTIFCIATION_DRAWER:\n    case actions.CLOSE_NOTIFCIATION_DRAWER: {\n        return Object.assign({}, state, { isOpen: action.payload });\n    }\n    default:\n        return state;\n    }\n};"]},"metadata":{},"sourceType":"module"}