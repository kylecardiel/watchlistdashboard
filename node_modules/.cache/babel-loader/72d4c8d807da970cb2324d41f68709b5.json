{"ast":null,"code":"function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport resolveShiftedAlias from '../../helpers/resolving-handlers/resolveShiftedAlias';\nimport resolveUnshiftedAlias from '../../helpers/resolving-handlers/resolveUnshiftedAlias';\nimport KeyOSAndLayoutAliasesDictionary from '../../const/KeyOSAndLayoutAliasesDictionary';\nimport KeySequenceParser from './KeySequenceParser';\nimport resolveUnaltedAlias from '../../helpers/resolving-handlers/resolveUnaltedAlias';\nimport resolveAltedAlias from '../../helpers/resolving-handlers/resolveAltedAlias';\nimport resolveUnaltShiftedAlias from '../../helpers/resolving-handlers/resolveUnaltShiftedAlias';\nimport resolveAltShiftedAlias from '../../helpers/resolving-handlers/resolveAltShiftedAlias';\n/**\n * Serializes instances of KeyCombination to KeyCombinationString.\n *\n * Used primarily to serialize string representations of key events as they happen.\n * @class\n */\n\nvar KeyCombinationSerializer =\n/*#__PURE__*/\nfunction () {\n  function KeyCombinationSerializer() {\n    _classCallCheck(this, KeyCombinationSerializer);\n  }\n\n  _createClass(KeyCombinationSerializer, null, [{\n    key: \"serialize\",\n\n    /**\n     * Returns a string representation of a single KeyCombination\n     * @param {KeyCombination} keyCombination KeyCombination to serialize\n     * @returns {string[]} Serialization of KeyCombination\n     */\n    value: function serialize(keyCombination) {\n      var combinationIncludesShift = keyCombination['Shift'];\n      var combinationIncludesAlt = keyCombination['Alt'];\n      var keyCombinationIdDict = {};\n      /**\n       * List of key names in alphabetical order\n       * @type {string[]}\n       */\n\n      var sortedKeys = Object.keys(keyCombination).sort();\n      sortedKeys.forEach(function (keyName) {\n        var keyAliases = [];\n\n        if (combinationIncludesShift) {\n          if (combinationIncludesAlt) {\n            var unaltShiftedKeyNames = resolveUnaltShiftedAlias(keyName);\n            var altShiftedKeyNames = resolveAltShiftedAlias(keyName);\n            keyAliases = [].concat(_toConsumableArray(keyAliases), [keyName], _toConsumableArray(unaltShiftedKeyNames), _toConsumableArray(altShiftedKeyNames));\n          } else {\n            var unshiftedKeyNames = resolveUnshiftedAlias(keyName);\n            var shiftedKeyNames = resolveShiftedAlias(keyName);\n            keyAliases = [].concat(_toConsumableArray(keyAliases), [keyName], _toConsumableArray(unshiftedKeyNames), _toConsumableArray(shiftedKeyNames));\n          }\n        } else if (combinationIncludesAlt) {\n          var unaltedKeyNames = resolveUnaltedAlias(keyName);\n          var altedKeyNames = resolveAltedAlias(keyName);\n          keyAliases = [].concat(_toConsumableArray(keyAliases), [keyName], _toConsumableArray(unaltedKeyNames), _toConsumableArray(altedKeyNames));\n        } else {\n          keyAliases.push(keyName);\n          var keyAlias = KeyOSAndLayoutAliasesDictionary[keyName];\n\n          if (keyAlias) {\n            keyAliases = [].concat(_toConsumableArray(keyAliases), _toConsumableArray(keyAlias));\n          }\n        }\n\n        var keyCombinationIds = Object.keys(keyCombinationIdDict);\n\n        if (keyCombinationIds.length > 0) {\n          keyCombinationIds.forEach(function (keyCombinationId) {\n            keyAliases.forEach(function (keyAlias) {\n              keyCombinationIdDict[keyCombinationId + \"+\".concat(keyAlias)] = _objectSpread({}, keyCombinationIdDict[keyCombinationId], _defineProperty({}, keyAlias, true));\n            });\n            delete keyCombinationIdDict[keyCombinationId];\n          });\n        } else {\n          keyAliases.forEach(function (keyAlias) {\n            keyCombinationIdDict[keyAlias] = _defineProperty({}, keyAlias, true);\n          });\n        }\n      });\n      return Object.values(keyCombinationIdDict).map(function (keysInCombo) {\n        return Object.keys(keysInCombo).sort().join('+');\n      });\n    }\n    /**\n     * Whether the specified key sequence is valid (is of the correct format and contains\n     * combinations consisting entirely of valid keys)\n     * @param {KeySequenceString} keySequence Key sequence to validate\n     * @returns {boolean} Whether the key sequence is valid\n     */\n\n  }, {\n    key: \"isValidKeySerialization\",\n    value: function isValidKeySerialization(keySequence) {\n      if (keySequence.length > 0) {\n        return !!KeySequenceParser.parse(keySequence, {\n          ensureValidKeys: true\n        }).combination;\n      } else {\n        return false;\n      }\n    }\n  }]);\n\n  return KeyCombinationSerializer;\n}();\n\nexport default KeyCombinationSerializer;","map":null,"metadata":{},"sourceType":"module"}