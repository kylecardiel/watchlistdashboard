{"ast":null,"code":"import { PRODUCT_TYPE_DETAILS, PRODUCT_LINES_OBJ } from 'shared/constants/domainConstantSelectors';\nimport { DATA_ATTRIBUTES } from 'shared/constants/stringConstantsSelectors';\nimport { BlackSeries2013n2014 } from 'Data/toys/actionFigures/blackSeries/blackSeries2013n2014';\nimport { BlackSeries2014n2015 } from 'Data/toys/actionFigures/blackSeries/blackSeries2014n2015';\nimport { BlackSeries2015nPresent } from 'Data/toys/actionFigures/blackSeries/blackSeries2015nPresent';\nimport { BlackSeriesCenterpiece } from 'Data/toys/actionFigures/blackSeries/blackSeriesCenterpiece';\nimport { BlackSeriesDeluxVehicle } from 'Data/toys/actionFigures/blackSeries/blackSeriesDeluxVehicle';\nimport { BlackSeriesExclusives } from 'Data/toys/actionFigures/blackSeries/blackSeriesExclusives';\nimport { BlackSeriesArchive } from 'Data/toys/actionFigures/blackSeries/blackSeriesArchive';\nimport { EliteSeries } from 'Data/toys/actionFigures/eliteSeries/eliteSeries';\nimport { ActionFleet } from 'Data/toys/vehicles/actionFleet';\nimport { Legos } from 'Data/toys/legos';\nimport { Movies } from 'Data/media/movies';\nimport { VideoGames } from 'Data/media/videoGames';\nconst ALL = PRODUCT_TYPE_DETAILS.ALL,\n      ACTION_FIGURES = PRODUCT_TYPE_DETAILS.ACTION_FIGURES,\n      LEGOS = PRODUCT_TYPE_DETAILS.LEGOS,\n      MOVIES = PRODUCT_TYPE_DETAILS.MOVIES,\n      VEHICLES = PRODUCT_TYPE_DETAILS.VEHICLES,\n      VIDEO_GAMES = PRODUCT_TYPE_DETAILS.VIDEO_GAMES;\nexport class API {}\n\nAPI.handleDataRequestsAPI = request => {\n  const productLine = request.productLine,\n        productType = request.productType,\n        filter = request.filter;\n  const filterAttribute = filter.filterAttribute,\n        value = filter.value;\n\n  switch (productType) {\n    case ALL:\n      return API.getAllData();\n\n    case ACTION_FIGURES:\n      return API.getActionFigureByProductLine(productLine, filter);\n\n    case LEGOS:\n      return API.getFilteredLegosBy(filterAttribute, value);\n\n    case MOVIES:\n      return API.getFilteredMoviesBy(filterAttribute, value);\n\n    case VEHICLES:\n      return API.getAllVehiclesBy(filterAttribute, value);\n\n    case VIDEO_GAMES:\n      return API.getFilteredVideoGameBySystem(value);\n\n    default:\n      break;\n  }\n};\n\nAPI.getAllData = () => {\n  return API.getAllToys().concat(API.getAllMedia());\n};\n\nAPI.getAllMedia = () => {\n  return API.getFilteredMoviesBy().concat(API.getFilteredVideoGameBySystem());\n};\n\nAPI.getAllToys = () => {\n  return API.getAllActionFiguresData().concat(API.getAllVehicleData()).concat(API.getFilteredLegosBy());\n};\n\nAPI.getActionFigureByProductLine = (productLine, filter) => {\n  const filterAttribute = filter.filterAttribute,\n        value = filter.value;\n\n  switch (productLine) {\n    case PRODUCT_LINES_OBJ.ALL:\n      return API.getAllActionFiguresData();\n\n    case PRODUCT_LINES_OBJ.BLACKSERIES:\n      return API.getFilteredBlackSeriesBy(filterAttribute, value);\n\n    case PRODUCT_LINES_OBJ.ELITESERIES:\n      return API.getFilteredEliteSeriesBy(filterAttribute, value);\n\n    default:\n      break;\n  }\n};\n\nAPI.getAllActionFiguresData = () => {\n  return API.getFilteredBlackSeriesBy().concat(API.getAllEliteSeriesData());\n};\n\nAPI.getAllBlackSeriesData = () => {\n  const result = BlackSeries2013n2014.concat(BlackSeries2014n2015).concat(BlackSeries2015nPresent).concat(BlackSeriesCenterpiece).concat(BlackSeriesDeluxVehicle).concat(BlackSeriesExclusives).concat(BlackSeriesArchive);\n  result.forEach(elem => {\n    elem.seriesName = 'Black Series 6\"';\n    elem.type = 'Action Figure';\n    elem.versions.push('Regular');\n  });\n  return result;\n};\n\nAPI.getFilterFiguresBy = (figures, filterAttribute, value) => {\n  return filterAttribute ? figures.filter(function (figure) {\n    switch (filterAttribute) {\n      case DATA_ATTRIBUTES.PROD_ACTION_FIGURES.GROUP:\n        return figure.group.includes(value);\n\n      case DATA_ATTRIBUTES.PROD_ACTION_FIGURES.VERSIONS:\n        return figure.versions.includes(value);\n\n      default:\n        return figure[filterAttribute] === value;\n    }\n  }) : figures;\n};\n\nAPI.getFilteredBlackSeriesBy = (filterAttribute, value) => {\n  const figures = API.getAllBlackSeriesData();\n  return API.getFilterFiguresBy(figures, filterAttribute, value);\n};\n\nAPI.getAllEliteSeriesData = () => {\n  const result = EliteSeries;\n  result.forEach(elem => {\n    elem.seriesName = 'Elite Series';\n    elem.type = 'Action Figure';\n  });\n  return result;\n};\n\nAPI.getFilteredEliteSeriesBy = (filterAttribute, value) => {\n  const figures = API.getAllEliteSeriesData();\n  return API.getFilterFiguresBy(figures, filterAttribute, value);\n};\n\nAPI.getAllLegoData = () => {\n  const legoResults = Legos;\n  legoResults.forEach(elem => {\n    elem.type = 'LEGO';\n  });\n  return legoResults;\n};\n\nAPI.getFilteredLegosBy = (filterAttribute, value) => {\n  const legoData = API.getAllLegoData();\n  return filterAttribute ? legoData.filter(function (lego) {\n    return lego[filterAttribute] === value;\n  }) : legoData;\n};\n\nAPI.getAllMovieData = () => {\n  const result = Movies;\n  result.forEach(elem => {\n    elem.type = 'Movie';\n  });\n  return result;\n};\n\nAPI.getFilteredMoviesBy = (filterAttribute, value) => {\n  const movies = API.getAllMovieData();\n  return filterDataBySingleNONArrayAttribute(movies, filterAttribute, value);\n};\n\nAPI.getAllVideoGameData = () => {\n  const result = VideoGames;\n  result.forEach(elem => {\n    elem.type = 'Video Game';\n  });\n  return result;\n};\n\nAPI.getFilteredVideoGameBySystem = system => {\n  const games = API.getAllVideoGameData();\n  return system ? games.filter(function (game) {\n    return game.systems.includes(system);\n  }) : games;\n};\n\nAPI.getAllActionFleetData = () => {\n  const result = ActionFleet;\n  result.forEach(elem => {\n    elem.type = 'Vehicle';\n    elem.seriesName = 'Action Fleet';\n  });\n  return result;\n};\n\nAPI.getFilteredActionFleetBy = (filterAttribute, value) => {\n  const actionFleet = API.getAllActionFleetData();\n  return filterDataBySingleNONArrayAttribute(actionFleet, filterAttribute, value);\n};\n\nAPI.getAllVehicleData = () => {\n  return API.getAllActionFleetData();\n};\n\nAPI.getAllVehiclesBy = (filterAttribute, value) => {\n  const vehicles = API.getAllVehicleData();\n  return filterDataBySingleNONArrayAttribute(vehicles, filterAttribute, value);\n};\n\nconst filterDataBySingleNONArrayAttribute = (dataSet, filterAttribute, value) => {\n  return filterAttribute ? dataSet.filter(function (element) {\n    return element[filterAttribute] === value;\n  }) : dataSet;\n};","map":{"version":3,"sources":["/Users/kylecardiel/Documents/Development/Frontend/starwarscollection/src/shared/api/api.js"],"names":["PRODUCT_TYPE_DETAILS","PRODUCT_LINES_OBJ","DATA_ATTRIBUTES","BlackSeries2013n2014","BlackSeries2014n2015","BlackSeries2015nPresent","BlackSeriesCenterpiece","BlackSeriesDeluxVehicle","BlackSeriesExclusives","BlackSeriesArchive","EliteSeries","ActionFleet","Legos","Movies","VideoGames","ALL","ACTION_FIGURES","LEGOS","MOVIES","VEHICLES","VIDEO_GAMES","API","handleDataRequestsAPI","request","productLine","productType","filter","filterAttribute","value","getAllData","getActionFigureByProductLine","getFilteredLegosBy","getFilteredMoviesBy","getAllVehiclesBy","getFilteredVideoGameBySystem","getAllToys","concat","getAllMedia","getAllActionFiguresData","getAllVehicleData","BLACKSERIES","getFilteredBlackSeriesBy","ELITESERIES","getFilteredEliteSeriesBy","getAllEliteSeriesData","getAllBlackSeriesData","result","forEach","elem","seriesName","type","versions","push","getFilterFiguresBy","figures","figure","PROD_ACTION_FIGURES","GROUP","group","includes","VERSIONS","getAllLegoData","legoResults","legoData","lego","getAllMovieData","movies","filterDataBySingleNONArrayAttribute","getAllVideoGameData","system","games","game","systems","getAllActionFleetData","getFilteredActionFleetBy","actionFleet","vehicles","dataSet","element"],"mappings":"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","sourcesContent":["import { PRODUCT_TYPE_DETAILS, PRODUCT_LINES_OBJ } from 'shared/constants/domainConstantSelectors';\nimport { DATA_ATTRIBUTES } from 'shared/constants/stringConstantsSelectors';\n\nimport { BlackSeries2013n2014 } from 'Data/toys/actionFigures/blackSeries/blackSeries2013n2014';\nimport { BlackSeries2014n2015 } from 'Data/toys/actionFigures/blackSeries/blackSeries2014n2015';\nimport { BlackSeries2015nPresent } from 'Data/toys/actionFigures/blackSeries/blackSeries2015nPresent';\nimport { BlackSeriesCenterpiece } from 'Data/toys/actionFigures/blackSeries/blackSeriesCenterpiece';\nimport { BlackSeriesDeluxVehicle } from 'Data/toys/actionFigures/blackSeries/blackSeriesDeluxVehicle';\nimport { BlackSeriesExclusives } from 'Data/toys/actionFigures/blackSeries/blackSeriesExclusives';\nimport { BlackSeriesArchive } from 'Data/toys/actionFigures/blackSeries/blackSeriesArchive';\n\nimport { EliteSeries } from 'Data/toys/actionFigures/eliteSeries/eliteSeries';\n\nimport { ActionFleet } from 'Data/toys/vehicles/actionFleet';\n\nimport { Legos } from 'Data/toys/legos';\nimport { Movies } from 'Data/media/movies';\nimport { VideoGames } from 'Data/media/videoGames';\n\nconst {\n    ALL,\n    ACTION_FIGURES,\n    LEGOS,\n    MOVIES,\n    VEHICLES,\n    VIDEO_GAMES,\n} = PRODUCT_TYPE_DETAILS;\n\nexport class API {\n\n    static handleDataRequestsAPI = request => {\n        const { \n            productLine,\n            productType, \n            filter, \n        } = request;\n        \n        const { \n            filterAttribute, \n            value, \n        } = filter;\n\n        switch(productType) {\n        case ALL:\n            return API.getAllData();\n        case ACTION_FIGURES:\n            return API.getActionFigureByProductLine(productLine, filter);\n        case LEGOS:\n            return API.getFilteredLegosBy(filterAttribute, value);\n        case MOVIES:\n            return API.getFilteredMoviesBy(filterAttribute, value);     \n        case VEHICLES:                \n            return API.getAllVehiclesBy(filterAttribute, value);\n        case VIDEO_GAMES:                \n            return API.getFilteredVideoGameBySystem(value);\n        default: \n            break;\n        }\n    }\n\n    static getAllData = () => {\n        return API.getAllToys()\n            .concat(this.getAllMedia());\n    }\n\n    static getAllMedia = () => {\n        return API.getFilteredMoviesBy()\n            .concat(this.getFilteredVideoGameBySystem());\n    }\n\n    static getAllToys = () => {\n        return API.getAllActionFiguresData()\n            .concat(this.getAllVehicleData())\n            .concat(this.getFilteredLegosBy());\n    }\n\n    static getActionFigureByProductLine = (productLine, filter) => {\n        const { \n            filterAttribute, \n            value, \n        } = filter;\n        \n        switch(productLine) {\n        case PRODUCT_LINES_OBJ.ALL:\n            return API.getAllActionFiguresData();\n        case PRODUCT_LINES_OBJ.BLACKSERIES:\n            return API.getFilteredBlackSeriesBy(filterAttribute, value);\n        case PRODUCT_LINES_OBJ.ELITESERIES:\n            return API.getFilteredEliteSeriesBy(filterAttribute, value);\n        default: \n            break;\n        }\n    }\n\n    static getAllActionFiguresData = () => {\n        return API.getFilteredBlackSeriesBy()\n            .concat(this.getAllEliteSeriesData());\n    }\n\n    static getAllBlackSeriesData = () => {\n        const result = BlackSeries2013n2014\n            .concat(BlackSeries2014n2015)\n            .concat(BlackSeries2015nPresent)\n            .concat(BlackSeriesCenterpiece)\n            .concat(BlackSeriesDeluxVehicle)\n            .concat(BlackSeriesExclusives)\n            .concat(BlackSeriesArchive);\n\n        result.forEach(elem => {\n            elem.seriesName = 'Black Series 6\"';\n            elem.type = 'Action Figure';\n            elem.versions.push('Regular');\n        });\n        return result;\n    }\n\n    static getFilterFiguresBy = (figures, filterAttribute, value) => {\n        return filterAttribute \n            ? figures.filter(function (figure) {\n                switch(filterAttribute){\n                case DATA_ATTRIBUTES.PROD_ACTION_FIGURES.GROUP:\n                    return figure.group.includes(value);\n                case DATA_ATTRIBUTES.PROD_ACTION_FIGURES.VERSIONS:\n                    return figure.versions.includes(value);\n                default:\n                    return figure[filterAttribute] === value;\n                }\n            })\n            : figures;\n    }\n\n    static getFilteredBlackSeriesBy = (filterAttribute, value) => {\n        const figures = API.getAllBlackSeriesData();\n        return API.getFilterFiguresBy(figures,filterAttribute, value);\n    }\n\n    static getAllEliteSeriesData = () => {\n        const result = EliteSeries;\n        result.forEach(elem => {\n            elem.seriesName = 'Elite Series';\n            elem.type = 'Action Figure';\n        });\n        return result;\n    }\n\n    static getFilteredEliteSeriesBy = (filterAttribute, value) => {\n        const figures = API.getAllEliteSeriesData();\n        return API.getFilterFiguresBy(figures,filterAttribute, value);\n    }\n\n    static getAllLegoData = () => {\n        const legoResults = Legos;\n        legoResults.forEach(elem => {elem.type = 'LEGO';});\n        return legoResults;\n    }\n\n    static getFilteredLegosBy = (filterAttribute, value) => {\n        const legoData = API.getAllLegoData();\n        return filterAttribute\n            ? legoData.filter(function (lego) {\n                return lego[filterAttribute] === value;\n            })\n            : legoData;\n    }\n\n    static getAllMovieData = () => {\n        const result = Movies;\n        result.forEach(elem => {elem.type = 'Movie';});\n        return result;\n    }\n\n    static getFilteredMoviesBy = (filterAttribute, value) => {\n        const movies = API.getAllMovieData();\n        return filterDataBySingleNONArrayAttribute(movies, filterAttribute, value);\n    }\n\n    static getAllVideoGameData = () => {\n        const result = VideoGames;\n        result.forEach(elem => {elem.type = 'Video Game';});\n        return result;\n    }\n\n    static getFilteredVideoGameBySystem = system => {\n        const games = API.getAllVideoGameData();\n        return system\n            ? games.filter(function (game) {\n                return game.systems.includes(system);\n            })\n            : games;\n    }\n\n    static getAllActionFleetData = () => {\n        const result = ActionFleet;\n        result.forEach(elem => {\n            elem.type = 'Vehicle';\n            elem.seriesName = 'Action Fleet';\n        });\n        return result;\n    }\n\n    static getFilteredActionFleetBy = (filterAttribute, value) => {\n        const actionFleet = API.getAllActionFleetData();\n        return filterDataBySingleNONArrayAttribute(actionFleet, filterAttribute, value);\n    }\n\n    static getAllVehicleData = () => {\n        return API.getAllActionFleetData();\n    }\n\n    static getAllVehiclesBy = (filterAttribute, value) => {\n        const vehicles = API.getAllVehicleData();\n        return filterDataBySingleNONArrayAttribute(vehicles, filterAttribute, value);\n    }\n}\n\nconst filterDataBySingleNONArrayAttribute = (dataSet, filterAttribute, value) => { \n    return filterAttribute\n        ? dataSet.filter(function (element) {\n            return element[filterAttribute] === value;\n        })\n        : dataSet;\n};\n\n"]},"metadata":{},"sourceType":"module"}