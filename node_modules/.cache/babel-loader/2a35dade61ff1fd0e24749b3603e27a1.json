{"ast":null,"code":"import * as actions from 'store/dataSet/dataSetActions';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { initialState } from '/initialState';\nexport const dataSet = (state = initialState.dataSet, action) => {\n  switch (action.type) {\n    case actions.CHANGE_CURRENT_SORT_ATTRIBUTE:\n      {\n        return ifPaylodIsStringTypeUpdateState(state, 'sortAttribute', action.payload);\n      }\n\n    case actions.CHANGE_PRODUCT_TYPE:\n      {\n        return ifPaylodIsStringTypeUpdateState(state, 'productType', action.payload);\n      }\n\n    case actions.CHANGE_PRODUCT_LINE:\n      {\n        return ifPaylodIsStringTypeUpdateState(state, 'productLine', action.payload);\n      }\n\n    case actions.SET_DISPLAY_DATA:\n      {\n        return Array.isArray(action.payload) ? updateState(state, 'displayedData', action.payload) : state;\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst ifPaylodIsStringTypeUpdateState = (state, attribute, payload) => {\n  return isTypeString(payload) ? updateState(state, attribute, payload) : state;\n};\n\nconst updateState = (state, attribute, payload) => {\n  const cloneState = cloneDeep(state);\n  cloneState[attribute] = payload;\n  return cloneState;\n};\n\nconst isTypeString = value => {\n  return typeof value === 'string';\n};","map":{"version":3,"sources":["/Users/kylecardiel/Documents/Development/Frontend/starwarscollection/src/store/dataSet/dataSetReducer.js"],"names":["actions","cloneDeep","initialState","dataSet","state","action","type","CHANGE_CURRENT_SORT_ATTRIBUTE","ifPaylodIsStringTypeUpdateState","payload","CHANGE_PRODUCT_TYPE","CHANGE_PRODUCT_LINE","SET_DISPLAY_DATA","Array","isArray","updateState","attribute","isTypeString","cloneState","value"],"mappings":"AAAA,OAAO,KAAKA,OAAZ,MAAyB,8BAAzB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,SAASC,YAAT,QAA6B,eAA7B;AAEA,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGF,YAAY,CAACC,OAAtB,EAA+BE,MAA/B,KAA0C;AAC7D,UAAQA,MAAM,CAACC,IAAf;AACA,SAAKN,OAAO,CAACO,6BAAb;AAA4C;AACxC,eAAOC,+BAA+B,CAACJ,KAAD,EAAQ,eAAR,EAAyBC,MAAM,CAACI,OAAhC,CAAtC;AACH;;AACD,SAAKT,OAAO,CAACU,mBAAb;AAAkC;AAC9B,eAAOF,+BAA+B,CAACJ,KAAD,EAAQ,aAAR,EAAuBC,MAAM,CAACI,OAA9B,CAAtC;AACH;;AACD,SAAKT,OAAO,CAACW,mBAAb;AAAkC;AAC9B,eAAOH,+BAA+B,CAACJ,KAAD,EAAQ,aAAR,EAAuBC,MAAM,CAACI,OAA9B,CAAtC;AACH;;AACD,SAAKT,OAAO,CAACY,gBAAb;AAA+B;AAC3B,eAAOC,KAAK,CAACC,OAAN,CAAcT,MAAM,CAACI,OAArB,IACDM,WAAW,CAACX,KAAD,EAAQ,eAAR,EAAyBC,MAAM,CAACI,OAAhC,CADV,GAEDL,KAFN;AAGH;;AACD;AACI,aAAOA,KAAP;AAhBJ;AAkBH,CAnBM;;AAqBP,MAAMI,+BAA+B,GAAG,CAACJ,KAAD,EAAQY,SAAR,EAAmBP,OAAnB,KAA+B;AACnE,SAAOQ,YAAY,CAACR,OAAD,CAAZ,GACDM,WAAW,CAACX,KAAD,EAAQY,SAAR,EAAmBP,OAAnB,CADV,GAEDL,KAFN;AAGH,CAJD;;AAMA,MAAMW,WAAW,GAAG,CAACX,KAAD,EAAQY,SAAR,EAAmBP,OAAnB,KAA+B;AAC/C,QAAMS,UAAU,GAAGjB,SAAS,CAACG,KAAD,CAA5B;AACAc,EAAAA,UAAU,CAACF,SAAD,CAAV,GAAwBP,OAAxB;AACA,SAAOS,UAAP;AACH,CAJD;;AAMA,MAAMD,YAAY,GAAGE,KAAK,IAAI;AAC1B,SAAO,OAAOA,KAAP,KAAiB,QAAxB;AACH,CAFD","sourcesContent":["import * as actions from 'store/dataSet/dataSetActions';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { initialState } from '/initialState';\n\nexport const dataSet = (state = initialState.dataSet, action) => {\n    switch (action.type) {\n    case actions.CHANGE_CURRENT_SORT_ATTRIBUTE: {\n        return ifPaylodIsStringTypeUpdateState(state, 'sortAttribute', action.payload);\n    }\n    case actions.CHANGE_PRODUCT_TYPE: {\n        return ifPaylodIsStringTypeUpdateState(state, 'productType', action.payload);\n    }\n    case actions.CHANGE_PRODUCT_LINE: {\n        return ifPaylodIsStringTypeUpdateState(state, 'productLine', action.payload);\n    }\n    case actions.SET_DISPLAY_DATA: {\n        return Array.isArray(action.payload)\n            ? updateState(state, 'displayedData', action.payload)\n            : state;\n    }\n    default:\n        return state;\n    }\n};\n\nconst ifPaylodIsStringTypeUpdateState = (state, attribute, payload) => {\n    return isTypeString(payload)\n        ? updateState(state, attribute, payload)\n        : state;\n};\n\nconst updateState = (state, attribute, payload) => {\n    const cloneState = cloneDeep(state);\n    cloneState[attribute] = payload;\n    return cloneState;\n};\n\nconst isTypeString = value => {\n    return typeof value === 'string';\n};"]},"metadata":{},"sourceType":"module"}