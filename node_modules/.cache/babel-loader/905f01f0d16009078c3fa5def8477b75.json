{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport PropTypes from 'prop-types';\nimport React, { PureComponent } from 'react';\nimport KeyEventManager from './lib/KeyEventManager';\nimport arrayFrom from './utils/array/arrayFrom';\nimport standardizeKeyName from './helpers/parsing-key-maps/standardizeKeyName';\nimport isValidKey, { InvalidKeyNameError } from './helpers/parsing-key-maps/isValidKey';\nimport isEmpty from './utils/collection/isEmpty';\nimport resolveAltShiftedAlias from './helpers/resolving-handlers/resolveAltShiftedAlias';\nimport resolveUnaltShiftedAlias from './helpers/resolving-handlers/resolveUnaltShiftedAlias';\nimport resolveShiftedAlias from './helpers/resolving-handlers/resolveShiftedAlias';\nimport resolveUnshiftedAlias from './helpers/resolving-handlers/resolveUnshiftedAlias';\nimport resolveAltedAlias from './helpers/resolving-handlers/resolveAltedAlias';\nimport resolveUnaltedAlias from './helpers/resolving-handlers/resolveUnaltedAlias';\nimport hasKey from './utils/object/hasKey';\n/**\n * Wraps a React component in a HotKeysIgnoreOverride component, which passes down the\n * callbacks and options necessary for React Hotkeys to work as a single prop value,\n * hotkeys. These must be unwrapped and applied to a DOM-mountable element within\n * the wrapped component (e.g. div, span, input, etc) in order for the key events\n * to be recorded.\n *\n * @param {React.ComponentClass} Component - Component class to wrap\n * @param {Object} hotKeysIgnoreOptions - Options that become the wrapping component's\n *                 default prop values\n * @param {string} eventManagerMethod - Name of EventManager method to use to handle a\n *        key event\n * @returns {React.ComponentClass} Wrapped component that is passed all of the React\n * hotkeys props in a single value, hotkeys.\n */\n\nfunction withHotKeysIgnoreOverride(Component) {\n  var _class, _temp;\n\n  var hotKeysIgnoreOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    only: [],\n    except: []\n  };\n  var eventManagerMethod = arguments.length > 2 ? arguments[2] : undefined;\n  /**\n   * A component that causes React Hotkeys to ignore the results of\n   * Configuration.ignoreEventCondition and instead either force the event to be\n   * ignored or observed. By default, this is all key events, but you can use\n   * the only prop to provide a whitelist, or the except prop to pass a blacklist.\n   * @class\n   */\n\n  return _temp = _class =\n  /*#__PURE__*/\n  function (_PureComponent) {\n    _inherits(HotKeysIgnoreOverride, _PureComponent);\n\n    function HotKeysIgnoreOverride(props) {\n      var _this;\n\n      _classCallCheck(this, HotKeysIgnoreOverride);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(HotKeysIgnoreOverride).call(this, props));\n      _this._handleKeyEvent = _this._handleKeyEvent.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n      _this._reloadDictionaries = _this._reloadDictionaries.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n      return _this;\n    }\n\n    _createClass(HotKeysIgnoreOverride, [{\n      key: \"render\",\n      value: function render() {\n        var _this$props = this.props,\n            only = _this$props.only,\n            except = _this$props.except,\n            props = _objectWithoutProperties(_this$props, [\"only\", \"except\"]);\n\n        var hotKeys = {\n          onKeyDown: this._handleKeyEvent,\n          onKeyPress: this._handleKeyEvent,\n          onKeyUp: this._handleKeyEvent,\n          onFocus: this._reloadDictionaries\n        };\n        return React.createElement(Component, _extends({\n          hotKeys: hotKeys\n        }, props));\n      }\n    }, {\n      key: \"_reloadDictionaries\",\n      value: function _reloadDictionaries() {\n        var _this$props2 = this.props,\n            only = _this$props2.only,\n            except = _this$props2.except;\n        this._onlyDict = keyDictionary(only);\n        this._exceptDict = keyDictionary(except);\n      }\n    }, {\n      key: \"_shouldIgnoreEvent\",\n      value: function _shouldIgnoreEvent(_ref) {\n        var key = _ref.key;\n\n        if (isEmpty(this._onlyDict)) {\n          if (isEmpty(this._exceptDict)) {\n            return true;\n          } else {\n            return !hasKey(this._exceptDict, key);\n          }\n        } else {\n          if (isEmpty(this._exceptDict)) {\n            return hasKey(this._onlyDict, key);\n          } else {\n            return hasKey(this._onlyDict, key) && !hasKey(this._exceptDict, key);\n          }\n        }\n      }\n    }, {\n      key: \"_handleKeyEvent\",\n      value: function _handleKeyEvent(event) {\n        if (this._shouldIgnoreEvent(event)) {\n          KeyEventManager.getInstance()[eventManagerMethod](event);\n        }\n      }\n    }]);\n\n    return HotKeysIgnoreOverride;\n  }(PureComponent), _defineProperty(_class, \"propTypes\", {\n    /**\n     * The whitelist of keys that keyevents should be ignored. i.e. if you place\n     * a key in this list, all events related to it will be ignored by react hotkeys\n     */\n    only: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n\n    /**\n     * The blacklist of keys that keyevents should be not ignored. i.e. if you place\n     * a key in this list, all events related to it will be still be observed by react\n     * hotkeys\n     */\n    except: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)])\n  }), _defineProperty(_class, \"defaultProps\", hotKeysIgnoreOptions), _temp;\n}\n\nfunction keyDictionary(list) {\n  return arrayFrom(list).reduce(function (memo, keyName) {\n    var finalKeyName = standardizeKeyName(keyName);\n\n    if (!isValidKey(finalKeyName)) {\n      throw new InvalidKeyNameError(keyName);\n    }\n\n    [resolveAltShiftedAlias, resolveUnaltShiftedAlias, resolveShiftedAlias, resolveUnshiftedAlias, resolveAltedAlias, resolveUnaltedAlias].forEach(function (func) {\n      memo[func(finalKeyName)] = true;\n    });\n    return memo;\n  }, {});\n}\n\nexport default withHotKeysIgnoreOverride;","map":null,"metadata":{},"sourceType":"module"}