{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\n * @typedef {KeyEventState[]} KeyEvent A record indicating which of the key events\n * have been registered to a particular key. The first bit is for the keydown event,\n * the second keypress and the third is for keyup.\n *\n * @example: A record for an key that has seen the keydown and keypress event, but not\n * the keyup event\n *\n * [1,1,0]\n */\n\n\nimport isUndefined from '../../utils/isUndefined';\nimport KeyEventState from '../../const/KeyEventState';\n/**\n * Creates and modifies KeyEvents\n * @class\n */\n\nvar KeyEventStateArrayManager =\n/*#__PURE__*/\nfunction () {\n  function KeyEventStateArrayManager() {\n    _classCallCheck(this, KeyEventStateArrayManager);\n  }\n\n  _createClass(KeyEventStateArrayManager, null, [{\n    key: \"newRecord\",\n\n    /**\n     * Makes a new KeyEvent with one of the bits set to true\n     * @param {KeyEventType=} keyEventType Index of bit to set to true\n     * @param {KeyEventState} keyEventState The state to set the key event to\n     * @returns {KeyEvent} New key event record with bit set to true\n     */\n    value: function newRecord(keyEventType, keyEventState) {\n      var record = [KeyEventState.unseen, KeyEventState.unseen, KeyEventState.unseen];\n\n      if (!isUndefined(keyEventType)) {\n        for (var i = 0; i <= keyEventType; i++) {\n          record[i] = keyEventState;\n        }\n      }\n\n      return record;\n    }\n    /**\n     * Sets a bit in the map to true\n     * @param {KeyEvent} record Map to set a bit to true\n     * @param {KeyEventType} index Index of bit to set\n     * @param {KeyEventState} keyEventState The state to set the key event to\n     */\n\n  }, {\n    key: \"setBit\",\n    value: function setBit(record, index, keyEventState) {\n      record[index] = keyEventState;\n      return record;\n    }\n    /**\n     * Returns a new record with the same values as the one passed to it\n     * @param {KeyEvent} original Record to copy\n     * @returns {KeyEvent} Record with the same values as the original\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone(original) {\n      var record = this.newRecord();\n\n      for (var i = 0; i < original.length; i++) {\n        record[i] = original[i];\n      }\n\n      return record;\n    }\n  }]);\n\n  return KeyEventStateArrayManager;\n}();\n\nexport default KeyEventStateArrayManager;","map":null,"metadata":{},"sourceType":"module"}