{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport KeyEventType from '../../const/KeyEventType';\nimport AbstractKeyEventStrategy from './AbstractKeyEventStrategy';\nimport describeKeyEventType from '../../helpers/logging/describeKeyEventType';\nimport KeyEventCounter from '../listening/KeyEventCounter';\nimport Logger from '../logging/Logger';\nimport isUndefined from '../../utils/isUndefined';\nimport printComponent from '../../helpers/logging/printComponent';\nimport getKeyName from '../../helpers/resolving-handlers/getKeyName';\nimport Configuration from '../config/Configuration';\nimport describeKeyEvent from '../../helpers/logging/describeKeyEvent';\nimport isCmdKey from '../../helpers/parsing-key-maps/isCmdKey';\nimport EventResponse from '../../const/EventResponse';\nimport contains from '../../utils/collection/contains';\nimport stateFromEvent from '../../helpers/parsing-key-maps/stateFromEvent';\nimport normalizeEventName from '../../utils/string/normalizeEventName';\n/**\n * Defines behaviour for dealing with key maps defined in global HotKey components\n * @class\n */\n\nvar GlobalKeyEventStrategy =\n/*#__PURE__*/\nfunction (_AbstractKeyEventStra) {\n  _inherits(GlobalKeyEventStrategy, _AbstractKeyEventStra);\n  /********************************************************************************\n   * Init & Reset\n   ********************************************************************************/\n\n\n  function GlobalKeyEventStrategy() {\n    var _this;\n\n    var configuration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var keyEventManager = arguments.length > 1 ? arguments[1] : undefined;\n\n    _classCallCheck(this, GlobalKeyEventStrategy);\n    /**\n     * Set state that gets cleared every time a component gets mounted or unmounted\n     */\n\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GlobalKeyEventStrategy).call(this, configuration, keyEventManager));\n    /**\n     * Set state that doesn't get cleared each time a new new component is mounted\n     * or unmounted\n     * @type {number}\n     */\n\n    /**\n     * Whether the global key event handlers have been bound to document yet or not\n     * @type {boolean}\n     */\n\n    _this.listenersBound = false;\n    _this.eventOptions = {\n      ignoreEventsCondition: Configuration.option('ignoreEventsCondition')\n    };\n    /**\n     * Dictionary of listener functions - currently only intended to house\n     * keyCombinationListener\n     */\n\n    _this.listeners = {};\n    return _this;\n  }\n  /********************************************************************************\n   * Enabling key maps and handlers\n   ********************************************************************************/\n\n  /**\n   * Registers the actions and handlers of a HotKeys component that has mounted\n   * @param {ComponentId} componentId - Id of the component that the keyMap belongs to\n   * @param {KeyMap} actionNameToKeyMap - Map of actions to key expressions\n   * @param {HandlersMap} actionNameToHandlersMap - Map of actions to handler functions\n   * @param {Object} options Hash of options that configure how the actions\n   *        and handlers are associated and called.\n   * @param {Object} eventOptions - Options for how the event should be handled\n   */\n\n\n  _createClass(GlobalKeyEventStrategy, [{\n    key: \"enableHotKeys\",\n    value: function enableHotKeys(componentId) {\n      var actionNameToKeyMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var actionNameToHandlersMap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var options = arguments.length > 3 ? arguments[3] : undefined;\n      var eventOptions = arguments.length > 4 ? arguments[4] : undefined;\n      this.eventOptions = eventOptions;\n\n      this._addComponent(componentId, actionNameToKeyMap, actionNameToHandlersMap, options);\n\n      this._updateDocumentHandlers();\n      /**\n       * Reset handler resolution state\n       */\n\n\n      this._initHandlerResolutionState();\n\n      this.logger.debug(this._logPrefix(componentId, {\n        eventId: false\n      }), 'Mounted.');\n      this.logger.verbose(this._logPrefix(componentId, {\n        eventId: false\n      }), 'Component options: \\n', printComponent(this.componentList.get(componentId)));\n    }\n    /**\n     * Handles when a mounted global HotKeys component updates its props and changes\n     * either the keyMap or handlers prop value\n     * @param {ComponentId} componentId - The component index of the component to\n     *        update\n     * @param {KeyMap} actionNameToKeyMap - Map of actions to key expressions\n     * @param {HandlersMap} actionNameToHandlersMap - Map of actions to handler functions\n     * @param {Object} options Hash of options that configure how the actions\n     *        and handlers are associated and called.\n     * @param {Object} eventOptions - Options for how the event should be handled\n     */\n\n  }, {\n    key: \"updateEnabledHotKeys\",\n    value: function updateEnabledHotKeys(componentId) {\n      var actionNameToKeyMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var actionNameToHandlersMap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var options = arguments.length > 3 ? arguments[3] : undefined;\n      var eventOptions = arguments.length > 4 ? arguments[4] : undefined;\n      this.eventOptions = eventOptions;\n      this.componentList.update(componentId, actionNameToKeyMap, actionNameToHandlersMap, options);\n      this.getKeyHistory().setMaxLength(this.componentList.getLongestSequence());\n      /**\n       * Reset strategy state specific to the global strategy\n       */\n\n      this._updateDocumentHandlers();\n      /**\n       * Reset handler resolution state\n       */\n\n\n      this._initHandlerResolutionState();\n\n      this.logger.debug(this._logPrefix(componentId, {\n        eventId: false\n      }), \"Global component \".concat(componentId, \" updated.\"));\n      this.logger.verbose(this._logPrefix(componentId, {\n        eventId: false\n      }), 'Component options: \\n', printComponent(this.componentList.get(componentId)));\n    }\n    /**\n     * Handles when a component is unmounted\n     * @param {ComponentId} componentId - Index of component that is being unmounted\n     */\n\n  }, {\n    key: \"disableHotKeys\",\n    value: function disableHotKeys(componentId) {\n      /**\n       * Manually update the registered key map state, usually reset using\n       * _resetRegisteredKeyMapsState() method\n       */\n      this.componentList.remove(componentId);\n      this.getKeyHistory().setMaxLength(this.componentList.getLongestSequence());\n\n      this._updateDocumentHandlers();\n      /**\n       * Reset handler resolution state\n       */\n\n\n      this._initHandlerResolutionState();\n\n      this.logger.debug(this._logPrefix(componentId, {\n        eventId: false\n      }), \"Unmounted global component \".concat(componentId));\n    }\n  }, {\n    key: \"_updateDocumentHandlers\",\n    value: function _updateDocumentHandlers() {\n      var _this2 = this;\n\n      var listenersShouldBeBound = this._listenersShouldBeBound();\n\n      if (!this.listenersBound && listenersShouldBeBound) {\n        Object.values(KeyEventType).forEach(function (recordIndex) {\n          var eventName = describeKeyEventType(recordIndex);\n\n          document[\"on\".concat(eventName)] = function (keyEvent) {\n            _this2.keyEventManager[\"handleGlobal\".concat(normalizeEventName(eventName))](keyEvent);\n          };\n\n          _this2.logger.debug(_this2._logPrefix(_this2.componentId, {\n            eventId: false\n          }), \"Bound handler handleGlobal\".concat(normalizeEventName(eventName), \"() to document.on\").concat(eventName, \"()\"));\n        });\n        this.listenersBound = true;\n      } else if (this.listenersBound && !listenersShouldBeBound) {\n        Object.values(KeyEventType).forEach(function (recordIndex) {\n          var eventName = describeKeyEventType(recordIndex);\n          delete document[\"on\".concat(eventName)];\n\n          _this2.logger.debug(_this2._logPrefix(_this2.componentId, {\n            eventId: false\n          }), \"Removed handler handleGlobal\".concat(normalizeEventName(eventName), \"() from document.on\").concat(eventName, \"()\"));\n        });\n        this.listenersBound = false;\n      }\n    }\n    /**\n     * Whether the document listeners should be bound, to record key events. Basically a check\n     * to see if there are any global key maps, or whether the user is currently rebinding to\n     * a new key combination.\n     * @returns {boolean} True if the document listeners should be bound\n     * @private\n     */\n\n  }, {\n    key: \"_listenersShouldBeBound\",\n    value: function _listenersShouldBeBound() {\n      return this.componentList.any() || this.listeners.keyCombination;\n    }\n    /********************************************************************************\n     * Recording key events\n     ********************************************************************************/\n\n    /**\n     * Records a keydown keyboard event and matches it against the list of pre-registered\n     * event handlers, calling the first matching handler with the highest priority if\n     * one exists.\n     *\n     * This method is called once when a keyboard event bubbles up to document, and checks\n     * the keymaps for all of the mounted global HotKey components.\n     * @param {KeyboardEvent} event - Event containing the key name and state\n     */\n\n  }, {\n    key: \"handleKeydown\",\n    value: function handleKeydown(event) {\n      var _key = getKeyName(event);\n\n      if (event.repeat && Configuration.option('ignoreRepeatedEventsWhenKeyHeldDown')) {\n        this.logger.debug(this._logPrefix(), \"Ignored repeated \".concat(describeKeyEvent(event, _key, KeyEventType.keydown), \" event.\"));\n        return true;\n      }\n\n      this._checkForModifierFlagDiscrepancies(event, _key, KeyEventType.keydown);\n\n      var reactAppResponse = this._howReactAppRespondedTo(event, _key, KeyEventType.keydown);\n\n      if (reactAppResponse === EventResponse.unseen && this.eventOptions.ignoreEventsCondition(event)) {\n        this.logger.debug(this._logPrefix(), \"Ignored \".concat(describeKeyEvent(event, _key, KeyEventType.keydown), \" event because ignoreEventsFilter rejected it.\"));\n        return;\n      }\n\n      if (reactAppResponse !== EventResponse.ignored) {\n        var keyEventState = stateFromEvent(event);\n        var currentCombination = this.getCurrentCombination();\n\n        if (currentCombination.isKeyIncluded(_key) || currentCombination.isEnding()) {\n          this._startAndLogNewKeyCombination(_key, keyEventState);\n        } else {\n          this._addToAndLogCurrentKeyCombination(_key, KeyEventType.keydown, keyEventState);\n        }\n      }\n\n      if (!contains([EventResponse.ignored, EventResponse.handled], reactAppResponse)) {\n        this._callHandlerIfExists(event, _key, KeyEventType.keydown);\n      }\n\n      this._simulateKeyPressForNonPrintableKeys(event, _key);\n    }\n  }, {\n    key: \"_howReactAppRespondedTo\",\n    value: function _howReactAppRespondedTo(event, key, keyEventType) {\n      var reactAppHistoryWithEvent = this.keyEventManager.reactAppHistoryWithEvent(key, keyEventType);\n\n      switch (reactAppHistoryWithEvent) {\n        case EventResponse.handled:\n          this.logger.debug(this._logPrefix(), \"Ignored \".concat(describeKeyEvent(event, key, keyEventType), \" event because React app has already handled it.\"));\n          break;\n\n        case EventResponse.ignored:\n          this.logger.debug(this._logPrefix(), \"Ignored \".concat(describeKeyEvent(event, key, keyEventType), \" event because React app has declared it should be ignored.\"));\n          break;\n\n        case EventResponse.seen:\n          this.logger.debug(this._logPrefix(), \"Received \".concat(describeKeyEvent(event, key, keyEventType), \" event (that has already passed through React app).\"));\n          break;\n\n        default:\n          KeyEventCounter.incrementId();\n          this.logger.debug(this._logPrefix(), \"New \".concat(describeKeyEvent(event, key, keyEventType), \" event (that has NOT passed through React app).\"));\n      }\n\n      return reactAppHistoryWithEvent;\n    }\n    /**\n     * Records a keypress keyboard event and matches it against the list of pre-registered\n     * event handlers, calling the first matching handler with the highest priority if\n     * one exists.\n     *\n     * This method is called once when a keyboard event bubbles up to document, and checks\n     * the keymaps for all of the mounted global HotKey components.\n     * @param {KeyboardEvent} event - Event containing the key name and state\n     */\n\n  }, {\n    key: \"handleKeyPress\",\n    value: function handleKeyPress(event) {\n      var key = getKeyName(event);\n\n      if (event.repeat && Configuration.option('ignoreRepeatedEventsWhenKeyHeldDown')) {\n        this.logger.debug(this._logPrefix(), \"Ignored repeated \".concat(describeKeyEvent(event, key, KeyEventType.keypress), \" event.\"));\n        return true;\n      }\n\n      var currentCombination = this.getCurrentCombination();\n\n      if (currentCombination.isKeyPressSimulated(key)) {\n        this.logger.debug(this._logPrefix(), \"Ignored \".concat(describeKeyEvent(event, key, KeyEventType.keypress), \" as it was not expected, and has already been simulated.\"));\n        return true;\n      }\n      /**\n       * We first decide if the keypress event should be handled (to ensure the correct\n       * order of logging statements)\n       */\n\n\n      var reactAppResponse = this._howReactAppRespondedTo(event, key, KeyEventType.keypress);\n      /**\n       * Add new key event to key combination history\n       */\n\n\n      if (currentCombination.isKeyIncluded(key)) {\n        this._addToAndLogCurrentKeyCombination(key, KeyEventType.keypress, stateFromEvent(event));\n      }\n\n      if (reactAppResponse === EventResponse.unseen) {\n        /**\n         * If the key event has not been seen by the React application, we ensure that\n         * it's not still waiting for it. This occurs when action handlers bound to keydown\n         * move the focus outside of the react app before it can record the keypress or\n         * keyup\n         */\n        this.keyEventManager.closeHangingKeyCombination(key, KeyEventType.keypress);\n\n        if (this.eventOptions.ignoreEventsCondition(event)) {\n          this.logger.debug(this._logPrefix(), \"Ignored \".concat(describeKeyEvent(event, key, KeyEventType.keypress), \" event because ignoreEventsFilter rejected it.\"));\n          return;\n        }\n      }\n\n      if (!contains([EventResponse.ignored, EventResponse.handled], reactAppResponse)) {\n        this._callHandlerIfExists(event, key, KeyEventType.keypress);\n      }\n    }\n    /**\n     * Records a keyup keyboard event and matches it against the list of pre-registered\n     * event handlers, calling the first matching handler with the highest priority if\n     * one exists.\n     *\n     * This method is called once when a keyboard event bubbles up to document, and checks\n     * the keymaps for all of the mounted global HotKey components.\n     * @param {KeyboardEvent} event - Event containing the key name and state\n     */\n\n  }, {\n    key: \"handleKeyUp\",\n    value: function handleKeyUp(event) {\n      var key = getKeyName(event);\n      var currentCombination = this.getCurrentCombination();\n\n      if (currentCombination.isKeyUpSimulated(key)) {\n        this.logger.debug(this._logPrefix(), \"Ignored \".concat(describeKeyEvent(event, key, KeyEventType.keyup), \" as it was not expected, and has already been simulated.\"));\n        return true;\n      }\n      /**\n       * We first decide if the keyup event should be handled (to ensure the correct\n       * order of logging statements)\n       */\n\n\n      var reactAppResponse = this._howReactAppRespondedTo(event, key, KeyEventType.keyup);\n      /**\n       * We then add the keyup to our current combination - regardless of whether\n       * it's to be handled or not. We need to do this to ensure that if a handler\n       * function changes focus to a context that ignored events, the keyup event\n       * is not lost (leaving react hotkeys thinking the key is still pressed).\n       */\n\n\n      if (currentCombination.isKeyIncluded(key)) {\n        this._addToAndLogCurrentKeyCombination(key, KeyEventType.keyup, stateFromEvent(event));\n      }\n\n      if (reactAppResponse === EventResponse.unseen) {\n        /**\n         * If the key event has not been seen by the React application, we ensure that\n         * it's not still waiting for it. This occurs when action handlers bound to keydown\n         * or keypress move the focus outside of the react app before it can record the keyup\n         */\n        this.keyEventManager.closeHangingKeyCombination(key, KeyEventType.keyup);\n\n        if (this.eventOptions.ignoreEventsCondition(event)) {\n          this.logger.debug(this._logPrefix(), \"Ignored \".concat(describeKeyEvent(event, key, KeyEventType.keyup), \" event because ignoreEventsFilter rejected it.\"));\n        } else {\n          /**\n           * We attempt to find a handler of the event, only if it has not already\n           * been handled and should not be ignored\n           */\n          if (!contains([EventResponse.ignored, EventResponse.handled], reactAppResponse)) {\n            this._callHandlerIfExists(event, key, KeyEventType.keyup);\n          }\n        }\n      } else {\n        /**\n         * We attempt to find a handler of the event, only if it has not already\n         * been handled and should not be ignored\n         */\n        if (!contains([EventResponse.ignored, EventResponse.handled], reactAppResponse)) {\n          this._callHandlerIfExists(event, key, KeyEventType.keyup);\n        }\n      }\n      /**\n       * We simulate any hidden keyup events hidden by the command key, regardless\n       * of whether the event should be ignored or not\n       */\n\n\n      this._simulateKeyUpEventsHiddenByCmd(event, key);\n\n      if (this.listeners.keyCombination && this._allKeysAreReleased()) {\n        this.listeners.keyCombination({\n          keys: currentCombination.getKeyDictionary(),\n          id: currentCombination.describe()\n        });\n      }\n    }\n  }, {\n    key: \"_simulateKeyPressForNonPrintableKeys\",\n    value: function _simulateKeyPressForNonPrintableKeys(event, key) {\n      this.keyEventManager.simulatePendingKeyPressEvents();\n\n      this._handleEventSimulation('handleKeyPress', this._shouldSimulate(KeyEventType.keypress, key), {\n        event: event,\n        key: key\n      });\n    }\n  }, {\n    key: \"_simulateKeyUpEventsHiddenByCmd\",\n    value: function _simulateKeyUpEventsHiddenByCmd(event, key) {\n      var _this3 = this;\n\n      if (isCmdKey(key)) {\n        /**\n         * We simulate pending key events in the React app before we do it globally\n         */\n        this.keyEventManager.simulatePendingKeyUpEvents();\n        this.getCurrentCombination().forEachKey(function (keyName) {\n          if (isCmdKey(keyName)) {\n            return;\n          }\n\n          _this3._handleEventSimulation('handleKeyUp', _this3._shouldSimulate(KeyEventType.keyup, keyName), {\n            event: event,\n            key: keyName\n          });\n        });\n      }\n    }\n  }, {\n    key: \"_startAndLogNewKeyCombination\",\n    value: function _startAndLogNewKeyCombination(keyName, keyEventState) {\n      this.getKeyHistory().startNewKeyCombination(keyName, keyEventState);\n      this.logger.verbose(this._logPrefix(), \"Started a new combination with '\".concat(keyName, \"'.\"));\n      this.logger.verbose(this._logPrefix(), \"Key history: \".concat(printComponent(this.getKeyHistory().toJSON()), \".\"));\n    }\n  }, {\n    key: \"_addToAndLogCurrentKeyCombination\",\n    value: function _addToAndLogCurrentKeyCombination(keyName, keyEventType, keyEventState) {\n      this.getKeyHistory().addKeyToCurrentCombination(keyName, keyEventType, keyEventState);\n\n      if (keyEventType === KeyEventType.keydown) {\n        this.logger.verbose(this._logPrefix(), \"Added '\".concat(keyName, \"' to current combination: '\").concat(this.getCurrentCombination().describe(), \"'.\"));\n      }\n\n      this.logger.verbose(this._logPrefix(), \"Key history: \".concat(printComponent(this.getKeyHistory().toJSON()), \".\"));\n    }\n    /********************************************************************************\n     * Event simulation\n     ********************************************************************************/\n\n  }, {\n    key: \"_handleEventSimulation\",\n    value: function _handleEventSimulation(handlerName, shouldSimulate, _ref) {\n      var event = _ref.event,\n          key = _ref.key;\n\n      if (shouldSimulate && Configuration.option('simulateMissingKeyPressEvents')) {\n        /**\n         * If a key does not have a keypress event, we simulate one immediately after\n         * the keydown event, to keep the behaviour consistent across all keys\n         */\n        var _event = this._cloneAndMergeEvent(event, {\n          key: key,\n          simulated: true\n        });\n\n        this[handlerName](_event);\n      }\n    }\n    /********************************************************************************\n     * Matching and calling handlers\n     ********************************************************************************/\n\n  }, {\n    key: \"_callHandlerIfExists\",\n    value: function _callHandlerIfExists(event, keyName, keyEventType) {\n      var eventName = describeKeyEventType(keyEventType);\n      var combinationName = this.getCurrentCombination().describe();\n\n      if (!this.componentList.anyActionsForEventType(keyEventType)) {\n        /**\n         * If there are no handlers registered for the particular key event type\n         * (keydown, keypress, keyup) then skip trying to find a matching handler\n         * for the current key combination\n         */\n        this.logger.debug(this._logPrefix(), \"Ignored '\".concat(combinationName, \"' \").concat(eventName, \" because it doesn't have any \").concat(eventName, \" handlers.\"));\n        return;\n      }\n      /**\n       * If there is at least one handler for the specified key event type (keydown,\n       * keypress, keyup), then attempt to find a handler that matches the current\n       * key combination\n       */\n\n\n      this.logger.verbose(this._logPrefix(), \"Attempting to find action matching '\".concat(combinationName, \"' \").concat(eventName, \" . . .\"));\n\n      this._callClosestMatchingHandler(event, keyName, keyEventType);\n    }\n  }, {\n    key: \"_callClosestMatchingHandler\",\n    value: function _callClosestMatchingHandler(event, keyName, keyEventType) {\n      var componentListIterator = this.componentList.getNewIterator();\n\n      while (componentListIterator.next()) {\n        var matchFound = _get(_getPrototypeOf(GlobalKeyEventStrategy.prototype), \"_callClosestMatchingHandler\", this).call(this, event, keyName, keyEventType, componentListIterator.getPosition(), 0);\n\n        if (matchFound) {\n          this.logger.debug(this._logPrefix(), \"Searching no further, as handler has been found (and called).\");\n          return;\n        }\n      }\n    }\n  }, {\n    key: \"_stopEventPropagation\",\n    value: function _stopEventPropagation(event, componentId) {\n      this.logger.debug(this._logPrefix(componentId), 'Stopping further event propagation.');\n\n      if (!event.simulated) {\n        event.stopPropagation();\n      }\n    }\n    /********************************************************************************\n     * Recording key combination\n     ********************************************************************************/\n\n    /**\n     * Add a new key combination listener function to be called the next time a key\n     * combination completes (assuming the cancel function is not called).\n     * @param {keyCombinationListener} callbackFunction Function to call with the next\n     *        completed key combination\n     * @returns {function} Function to call to cancel listening for the next key\n     *        combination\n     */\n\n  }, {\n    key: \"addKeyCombinationListener\",\n    value: function addKeyCombinationListener(callbackFunction) {\n      var _this4 = this;\n\n      var cancel = function cancel() {\n        delete _this4.listeners.keyCombination;\n      };\n\n      this.listeners.keyCombination = function (keyCombination) {\n        callbackFunction(keyCombination);\n        cancel();\n      };\n\n      this._updateDocumentHandlers();\n\n      return cancel;\n    }\n    /********************************************************************************\n     * Logging\n     ********************************************************************************/\n\n  }, {\n    key: \"_logPrefix\",\n    value: function _logPrefix(componentId) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var eventIcons = Logger.eventIcons;\n      var componentIcons = Logger.componentIcons;\n      var base = 'HotKeys (GLOBAL';\n\n      if (options.eventId !== false) {\n        var eventId = isUndefined(options.eventId) ? KeyEventCounter.getId() : options.eventId;\n        base = \"\".concat(base, \"-E\").concat(eventId).concat(eventIcons[eventId % eventIcons.length]);\n      }\n\n      if (isUndefined(componentId)) {\n        return \"\".concat(base, \"):\");\n      } else {\n        return \"\".concat(base, \"-C\").concat(componentId).concat(componentIcons[componentId % componentIcons.length], \"):\");\n      }\n    }\n  }]);\n\n  return GlobalKeyEventStrategy;\n}(AbstractKeyEventStrategy);\n\nexport default GlobalKeyEventStrategy;","map":null,"metadata":{},"sourceType":"module"}