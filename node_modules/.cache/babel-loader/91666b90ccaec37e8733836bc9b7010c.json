{"ast":null,"code":"import { mockData } from 'shared/api/mockData';\n\nconst axios = require('axios');\n\nconst apiToken = 'UcY7RIsoOUblEZ5NGJ97TS0qjRMdJfE0IyuytK4UtAyRAeGUJkCA127E6wcB';\nconst baseURL = 'https://api.worldtradingdata.com/api/v1/stock';\nexport class API {\n  constructor() {\n    this.makeRealAPICalls = false;\n  }\n\n}\n\nAPI.handleDataRequestsAPI = request => {\n  if (API.makeRealAPICalls) {\n    const requestList = ['SPY', 'DJI', 'RUS', 'NDX', 'TSLA'].join(',');\n    let finalRequest = \"\".concat(baseURL, \"?symbol=\").concat(requestList, \"&api_token=\").concat(apiToken);\n    return axios.get(finalRequest).then(response => response.data.data);\n  } else {\n    let promise = new Promise((resolve, reject) => {\n      const data = mockData;\n      data && resolve(data);\n      reject('Never going to fail, calling a local js file...');\n    });\n    return promise.then(data => {\n      return data;\n    });\n  }\n};\n\nAPI.handleDataRequestsAPI = request => {\n  if (API.makeRealAPICalls) {\n    const requestList = ['SPY', 'DJI', 'RUS', 'NDX', 'TSLA'].join(',');\n    let finalRequest = \"\".concat(baseURL, \"?symbol=\").concat(requestList, \"&api_token=\").concat(apiToken);\n    return axios.get(finalRequest).then(response => response.data.data);\n  } else {\n    let promise = new Promise((resolve, reject) => {\n      const data = mockData;\n      data && resolve(data);\n      reject('Never going to fail, calling a local js file...');\n    });\n    return promise.then(data => {\n      return data;\n    });\n  }\n};","map":{"version":3,"sources":["/Users/kylecardiel/Documents/Development/Frontend/watchlistdashboard/src/shared/api/api.js"],"names":["mockData","axios","require","apiToken","baseURL","API","makeRealAPICalls","handleDataRequestsAPI","request","requestList","join","finalRequest","get","then","response","data","promise","Promise","resolve","reject"],"mappings":"AAAA,SAASA,QAAT,QAAyB,qBAAzB;;AAEA,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,QAAQ,GAAG,8DAAjB;AACA,MAAMC,OAAO,GAAG,+CAAhB;AAEA,OAAO,MAAMC,GAAN,CAAU;AAAA;AAAA,SAEbC,gBAFa,GAEM,KAFN;AAAA;;AAAA;;AAAJD,G,CAIFE,qB,GAAwBC,OAAO,IAAI;AAEtC,MANKH,GAMF,CAAKC,gBAAR,EAAyB;AACrB,UAAMG,WAAW,GAAG,CAAC,KAAD,EAAO,KAAP,EAAa,KAAb,EAAmB,KAAnB,EAAyB,MAAzB,EAAiCC,IAAjC,CAAsC,GAAtC,CAApB;AACA,QAAIC,YAAY,aAAMP,OAAN,qBAAwBK,WAAxB,wBAAiDN,QAAjD,CAAhB;AACA,WAAOF,KAAK,CAACW,GAAN,CAAUD,YAAV,EAAwBE,IAAxB,CAA6BC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,CAAcA,IAAvD,CAAP;AACH,GAJD,MAIO;AACH,QAAIC,OAAO,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC3C,YAAMJ,IAAI,GAAGf,QAAb;AACAe,MAAAA,IAAI,IAAIG,OAAO,CAACH,IAAD,CAAf;AACAI,MAAAA,MAAM,CAAC,iDAAD,CAAN;AACH,KAJa,CAAd;AAMA,WAAOH,OAAO,CAACH,IAAR,CAAaE,IAAI,IAAI;AACxB,aAAOA,IAAP;AACH,KAFM,CAAP;AAGH;AACJ,C;;AArBQV,G,CAuBFE,qB,GAAwBC,OAAO,IAAI;AAEtC,MAzBKH,GAyBF,CAAKC,gBAAR,EAAyB;AACrB,UAAMG,WAAW,GAAG,CAAC,KAAD,EAAO,KAAP,EAAa,KAAb,EAAmB,KAAnB,EAAyB,MAAzB,EAAiCC,IAAjC,CAAsC,GAAtC,CAApB;AACA,QAAIC,YAAY,aAAMP,OAAN,qBAAwBK,WAAxB,wBAAiDN,QAAjD,CAAhB;AACA,WAAOF,KAAK,CAACW,GAAN,CAAUD,YAAV,EAAwBE,IAAxB,CAA6BC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,CAAcA,IAAvD,CAAP;AACH,GAJD,MAIO;AACH,QAAIC,OAAO,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC3C,YAAMJ,IAAI,GAAGf,QAAb;AACAe,MAAAA,IAAI,IAAIG,OAAO,CAACH,IAAD,CAAf;AACAI,MAAAA,MAAM,CAAC,iDAAD,CAAN;AACH,KAJa,CAAd;AAMA,WAAOH,OAAO,CAACH,IAAR,CAAaE,IAAI,IAAI;AACxB,aAAOA,IAAP;AACH,KAFM,CAAP;AAGH;AACJ,C","sourcesContent":["import { mockData } from 'shared/api/mockData';\n\nconst axios = require('axios');\nconst apiToken = 'UcY7RIsoOUblEZ5NGJ97TS0qjRMdJfE0IyuytK4UtAyRAeGUJkCA127E6wcB';\nconst baseURL = 'https://api.worldtradingdata.com/api/v1/stock';\n\nexport class API {\n\n    makeRealAPICalls = false;\n\n    static handleDataRequestsAPI = request => {\n\n        if(this.makeRealAPICalls){\n            const requestList = ['SPY','DJI','RUS','NDX','TSLA'].join(',');\n            let finalRequest = `${baseURL}?symbol=${requestList}&api_token=${apiToken}`\n            return axios.get(finalRequest).then(response => response.data.data);\n        } else {\n            let promise = new Promise((resolve, reject) => {\n                const data = mockData;\n                data && resolve(data);\n                reject('Never going to fail, calling a local js file...');\n            });\n                   \n            return promise.then(data => {\n                return data;\n            });\n        }\n    }\n\n    static handleDataRequestsAPI = request => {\n\n        if(this.makeRealAPICalls){\n            const requestList = ['SPY','DJI','RUS','NDX','TSLA'].join(',');\n            let finalRequest = `${baseURL}?symbol=${requestList}&api_token=${apiToken}`\n            return axios.get(finalRequest).then(response => response.data.data);\n        } else {\n            let promise = new Promise((resolve, reject) => {\n                const data = mockData;\n                data && resolve(data);\n                reject('Never going to fail, calling a local js file...');\n            });\n                   \n            return promise.then(data => {\n                return data;\n            });\n        }\n    }\n\n}"]},"metadata":{},"sourceType":"module"}