{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport PropTypes from 'prop-types';\nimport { Component } from 'react';\nimport Configuration from './lib/config/Configuration';\nimport KeyEventManager from './lib/KeyEventManager';\nimport backwardsCompatibleContext from './utils/backwardsCompatibleContext';\n\nvar GlobalHotKeys =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(GlobalHotKeys, _Component);\n\n  function GlobalHotKeys(props) {\n    var _this;\n\n    _classCallCheck(this, GlobalHotKeys);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GlobalHotKeys).call(this, props));\n    _this._id = KeyEventManager.getInstance().registerGlobalKeyMap(props.keyMap);\n    /**\n     * We maintain a separate instance variable to contain context that will be\n     * passed down to descendants of this component so we can have a consistent\n     * reference to the same object, rather than instantiating a new one on each\n     * render, causing unnecessary re-rendering of descendant components that\n     * consume the context.\n     *\n     * @see https://reactjs.org/docs/context.html#caveats\n     */\n\n    _this._childContext = {\n      globalHotKeysParentId: _this._id\n    };\n    return _this;\n  }\n\n  _createClass(GlobalHotKeys, [{\n    key: \"render\",\n    value: function render() {\n      return this.props.children || null;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var keyEventManager = KeyEventManager.getInstance();\n      keyEventManager.reregisterGlobalKeyMap(this._id, this.props.keyMap);\n\n      if (this.props.allowChanges || !Configuration.option('ignoreKeymapAndHandlerChangesByDefault')) {\n        var _this$props = this.props,\n            keyMap = _this$props.keyMap,\n            handlers = _this$props.handlers;\n        /**\n         * Component defines global hotkeys, so any changes to props may have changes\n         * that should have immediate effect\n         */\n\n        keyEventManager.updateEnabledGlobalHotKeys(this._id, keyMap, handlers, this._getComponentOptions(), this._getEventOptions());\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props2 = this.props,\n          keyMap = _this$props2.keyMap,\n          handlers = _this$props2.handlers;\n      var globalHotKeysParentId = this.context.globalHotKeysParentId;\n      var keyEventManager = KeyEventManager.getInstance();\n      keyEventManager.registerGlobalComponentMount(this._id, globalHotKeysParentId);\n      keyEventManager.enableGlobalHotKeys(this._id, keyMap, handlers, this._getComponentOptions(), this._getEventOptions());\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var keyEventManager = KeyEventManager.getInstance();\n      keyEventManager.deregisterGlobalKeyMap(this._id);\n      keyEventManager.disableGlobalHotKeys(this._id);\n      keyEventManager.registerGlobalComponentUnmount();\n    }\n  }, {\n    key: \"_getComponentOptions\",\n    value: function _getComponentOptions() {\n      return {\n        defaultKeyEvent: Configuration.option('defaultKeyEvent')\n      };\n    }\n  }, {\n    key: \"_getEventOptions\",\n    value: function _getEventOptions() {\n      return {\n        ignoreEventsCondition: Configuration.option('ignoreEventsCondition')\n      };\n    }\n  }]);\n\n  return GlobalHotKeys;\n}(Component);\n\n_defineProperty(GlobalHotKeys, \"propTypes\", {\n  /**\n   * A map from action names to Mousetrap or Browser key sequences\n   * @type {KeyMap}\n   */\n  keyMap: PropTypes.object,\n\n  /**\n   * A map from action names to event handler functions\n   * @typedef {Object.<ActionName, Function>} HandlersMap\n   */\n\n  /**\n   * A map from action names to event handler functions\n   * @type {HandlersMap}\n   */\n  handlers: PropTypes.object,\n\n  /**\n   * Whether the keyMap or handlers are permitted to change after the\n   * component mounts. If false, changes to the keyMap and handlers\n   * props will be ignored\n   */\n  allowChanges: PropTypes.bool\n});\n\nexport default backwardsCompatibleContext(GlobalHotKeys, {\n  deprecatedAPI: {\n    contextTypes: {\n      globalHotKeysParentId: PropTypes.number\n    },\n    childContextTypes: {\n      globalHotKeysParentId: PropTypes.number\n    }\n  },\n  newAPI: {\n    contextType: {\n      globalHotKeysParentId: undefined\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"module"}